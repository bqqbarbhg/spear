#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'EnvmapBlend':
            Get shader desc: EnvmapBlend_EnvmapBlend_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_EnvmapBlend_vs_pos = 0
            Fragment shader: fs
                Uniform block 'Pixel':
                    C struct: EnvmapBlend_Pixel_t
                    Bind slot: SLOT_EnvmapBlend_Pixel = 0
                Image 'envmapPrev':
                    Type: SG_IMAGETYPE_ARRAY
                    Bind slot: SLOT_EnvmapBlend_envmapPrev = 0
                Image 'blueNoise':
                    Type: SG_IMAGETYPE_2D
                    Bind slot: SLOT_EnvmapBlend_blueNoise = 1
                Image 'lighting':
                    Type: SG_IMAGETYPE_2D
                    Bind slot: SLOT_EnvmapBlend_lighting = 2


    Shader descriptor structs:

        sg_shader EnvmapBlend = sg_make_shader(EnvmapBlend_EnvmapBlend_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_EnvmapBlend_vs_pos] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_EnvmapBlend_envmapPrev = 0;
        SLOT_EnvmapBlend_blueNoise = 1;
        SLOT_EnvmapBlend_lighting = 2;

    Bind slot and C-struct for uniform block 'Pixel':

        EnvmapBlend_Pixel_t Pixel = {
            .lightFactor = ...;
            .prevLevel = ...;
            .prevShift = ...;
            .uvToLightMad = ...;
            .uvToBlueNoiseMad = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_EnvmapBlend_Pixel, &Pixel, sizeof(Pixel));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before EnvmapBlend.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
const sg_shader_desc* EnvmapBlend_EnvmapBlend_shader_desc(void);
#define ATTR_EnvmapBlend_vs_pos (0)
#define SLOT_EnvmapBlend_envmapPrev (0)
#define SLOT_EnvmapBlend_blueNoise (1)
#define SLOT_EnvmapBlend_lighting (2)
#define SLOT_EnvmapBlend_Pixel (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct EnvmapBlend_Pixel_t {
    float lightFactor;
    float prevLevel;
    sf::Vec2 prevShift;
    sf::Vec4 uvToLightMad;
    sf::Vec4 uvToBlueNoiseMad;
} EnvmapBlend_Pixel_t;
#pragma pack(pop)
#if defined(SOKOL_SHDC_IMPL)
#if defined(SOKOL_GLCORE33)
/*
    #version 330
    
    out vec2 v_uv;
    layout(location = 0) in vec2 pos;
    
    void main()
    {
        v_uv = pos;
        gl_Position = vec4((pos.x * 2.0) - 1.0, (pos.y * (-2.0)) + 1.0, 0.5, 1.0);
    }
    
*/
static const char EnvmapBlend_vs_source_glsl330[177] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x28,0x70,0x6f,0x73,0x2e,0x78,0x20,0x2a,0x20,0x32,0x2e,
    0x30,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x28,0x70,0x6f,0x73,0x2e,0x79,
    0x20,0x2a,0x20,0x28,0x2d,0x32,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 330
    
    uniform vec4 Pixel[3];
    uniform sampler2DArray envmapPrev;
    uniform sampler2D blueNoise;
    uniform sampler2D lighting;
    
    in vec2 v_uv;
    layout(location = 0) out vec4 o_color;
    
    void main()
    {
        vec4 _44 = textureLod(envmapPrev, vec3(v_uv + Pixel[0].zw, Pixel[0].y), 0.0);
        float _87 = 0.001000000047497451305389404296875 * clamp((textureLod(blueNoise, (v_uv * Pixel[2].xy) + Pixel[2].zw, 0.0).x * 4.0) + 0.9900000095367431640625, 0.0, 1.0);
        vec3 light = vec3(0.0);
        vec2 _100 = (v_uv * Pixel[1].xy) + Pixel[1].zw;
        bool _109 = all(equal(_100, clamp(_100, vec2(0.0), vec2(1.0))));
        bool _117;
        if (_109)
        {
            _117 = Pixel[0].x > 9.9999997473787516355514526367188e-05;
        }
        else
        {
            _117 = _109;
        }
        if (_117)
        {
            light = textureLod(lighting, _100, 0.0).xyz * Pixel[0].x;
        }
        o_color = vec4(mix(_44.xyz, light, vec3(_87)), clamp(_44.w + _87, 0.0, 1.0));
    }
    
*/
static const char EnvmapBlend_fs_source_glsl330[929] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x50,0x69,0x78,0x65,0x6c,
    0x5b,0x33,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x20,0x65,0x6e,0x76,0x6d,
    0x61,0x70,0x50,0x72,0x65,0x76,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x62,0x6c,0x75,0x65,0x4e,0x6f,
    0x69,0x73,0x65,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x3b,
    0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,
    0x34,0x34,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,
    0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,0x72,0x65,0x76,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x76,0x5f,0x75,0x76,0x20,0x2b,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x30,0x5d,
    0x2e,0x7a,0x77,0x2c,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x30,0x5d,0x2e,0x79,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x38,0x37,0x20,0x3d,0x20,0x30,0x2e,0x30,0x30,0x31,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x34,0x37,0x34,0x39,0x37,0x34,0x35,0x31,0x33,0x30,0x35,0x33,
    0x38,0x39,0x34,0x30,0x34,0x32,0x39,0x36,0x38,0x37,0x35,0x20,0x2a,0x20,0x63,0x6c,
    0x61,0x6d,0x70,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,
    0x62,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x2c,0x20,0x28,0x76,0x5f,0x75,0x76,
    0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x29,0x20,
    0x2b,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x32,0x5d,0x2e,0x7a,0x77,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x2e,0x78,0x20,0x2a,0x20,0x34,0x2e,0x30,0x29,0x20,0x2b,0x20,0x30,
    0x2e,0x39,0x39,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x35,0x33,0x36,0x37,0x34,0x33,
    0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,
    0x68,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x30,0x30,0x20,0x3d,0x20,
    0x28,0x76,0x5f,0x75,0x76,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x31,0x5d,
    0x2e,0x78,0x79,0x29,0x20,0x2b,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x31,0x5d,0x2e,
    0x7a,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,
    0x39,0x20,0x3d,0x20,0x61,0x6c,0x6c,0x28,0x65,0x71,0x75,0x61,0x6c,0x28,0x5f,0x31,
    0x30,0x30,0x2c,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x30,0x2c,0x20,
    0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x31,0x2e,0x30,0x29,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,
    0x6c,0x20,0x5f,0x31,0x31,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x31,0x30,0x39,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,0x50,0x69,0x78,0x65,0x6c,
    0x5b,0x30,0x5d,0x2e,0x78,0x20,0x3e,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,
    0x37,0x34,0x37,0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,0x35,0x35,0x31,0x34,
    0x35,0x32,0x36,0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x37,
    0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x31,0x37,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x6c,0x69,
    0x67,0x68,0x74,0x69,0x6e,0x67,0x2c,0x20,0x5f,0x31,0x30,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x30,
    0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x6d,0x69,
    0x78,0x28,0x5f,0x34,0x34,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x38,0x37,0x29,0x29,0x2c,0x20,0x63,0x6c,
    0x61,0x6d,0x70,0x28,0x5f,0x34,0x34,0x2e,0x77,0x20,0x2b,0x20,0x5f,0x38,0x37,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
static const sg_shader_desc EnvmapBlend_EnvmapBlend_shader_desc_glsl330 = {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    EnvmapBlend_vs_source_glsl330, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    EnvmapBlend_fs_source_glsl330, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        48, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,3},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"envmapPrev",SG_IMAGETYPE_ARRAY},{"blueNoise",SG_IMAGETYPE_2D},{"lighting",SG_IMAGETYPE_2D},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "EnvmapBlend_EnvmapBlend_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_GLCORE33 */
#if defined(SOKOL_GLES3)
/*
    #version 300 es
    
    out vec2 v_uv;
    layout(location = 0) in vec2 pos;
    
    void main()
    {
        v_uv = pos;
        gl_Position = vec4((pos.x * 2.0) - 1.0, (pos.y * (-2.0)) + 1.0, 0.5, 1.0);
    }
    
*/
static const char EnvmapBlend_vs_source_glsl300es[180] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x70,0x6f,0x73,0x2e,0x78,0x20,0x2a,
    0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x28,0x70,0x6f,
    0x73,0x2e,0x79,0x20,0x2a,0x20,0x28,0x2d,0x32,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,
    0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 Pixel[3];
    uniform highp sampler2DArray envmapPrev;
    uniform highp sampler2D blueNoise;
    uniform highp sampler2D lighting;
    
    in highp vec2 v_uv;
    layout(location = 0) out highp vec4 o_color;
    
    void main()
    {
        highp vec4 _44 = textureLod(envmapPrev, vec3(v_uv + Pixel[0].zw, Pixel[0].y), 0.0);
        highp float _87 = 0.001000000047497451305389404296875 * clamp((textureLod(blueNoise, (v_uv * Pixel[2].xy) + Pixel[2].zw, 0.0).x * 4.0) + 0.9900000095367431640625, 0.0, 1.0);
        highp vec3 light = vec3(0.0);
        highp vec2 _100 = (v_uv * Pixel[1].xy) + Pixel[1].zw;
        bool _109 = all(equal(_100, clamp(_100, vec2(0.0), vec2(1.0))));
        bool _117;
        if (_109)
        {
            _117 = Pixel[0].x > 9.9999997473787516355514526367188e-05;
        }
        else
        {
            _117 = _109;
        }
        if (_117)
        {
            light = textureLod(lighting, _100, 0.0).xyz * Pixel[0].x;
        }
        o_color = vec4(mix(_44.xyz, light, vec3(_87)), clamp(_44.w + _87, 0.0, 1.0));
    }
    
*/
static const char EnvmapBlend_fs_source_glsl300es[1038] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x33,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x20,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,
    0x72,0x65,0x76,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x62,0x6c,0x75,
    0x65,0x4e,0x6f,0x69,0x73,0x65,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x34,0x34,0x20,0x3d,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x65,0x6e,0x76,0x6d,0x61,
    0x70,0x50,0x72,0x65,0x76,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x76,0x5f,0x75,0x76,
    0x20,0x2b,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x30,0x5d,0x2e,0x7a,0x77,0x2c,0x20,
    0x50,0x69,0x78,0x65,0x6c,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x38,0x37,0x20,0x3d,0x20,0x30,0x2e,0x30,0x30,0x31,0x30,0x30,
    0x30,0x30,0x30,0x30,0x30,0x34,0x37,0x34,0x39,0x37,0x34,0x35,0x31,0x33,0x30,0x35,
    0x33,0x38,0x39,0x34,0x30,0x34,0x32,0x39,0x36,0x38,0x37,0x35,0x20,0x2a,0x20,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,
    0x28,0x62,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x2c,0x20,0x28,0x76,0x5f,0x75,
    0x76,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x29,
    0x20,0x2b,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x32,0x5d,0x2e,0x7a,0x77,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2e,0x78,0x20,0x2a,0x20,0x34,0x2e,0x30,0x29,0x20,0x2b,0x20,
    0x30,0x2e,0x39,0x39,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x35,0x33,0x36,0x37,0x34,
    0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x30,0x30,0x20,0x3d,0x20,0x28,0x76,0x5f,
    0x75,0x76,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x31,0x5d,0x2e,0x78,0x79,
    0x29,0x20,0x2b,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x31,0x5d,0x2e,0x7a,0x77,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,0x39,0x20,0x3d,
    0x20,0x61,0x6c,0x6c,0x28,0x65,0x71,0x75,0x61,0x6c,0x28,0x5f,0x31,0x30,0x30,0x2c,
    0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x30,0x2c,0x20,0x76,0x65,0x63,
    0x32,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,
    0x29,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,
    0x31,0x31,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x30,
    0x39,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x30,0x5d,
    0x2e,0x78,0x20,0x3e,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x34,0x37,
    0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,0x35,0x35,0x31,0x34,0x35,0x32,0x36,
    0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,
    0x5f,0x31,0x30,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x31,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x69,0x6e,0x67,0x2c,0x20,0x5f,0x31,0x30,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,
    0x78,0x79,0x7a,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x30,0x5d,0x2e,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x6d,0x69,0x78,0x28,0x5f,
    0x34,0x34,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x6c,0x69,0x67,0x68,0x74,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x5f,0x38,0x37,0x29,0x29,0x2c,0x20,0x63,0x6c,0x61,0x6d,0x70,
    0x28,0x5f,0x34,0x34,0x2e,0x77,0x20,0x2b,0x20,0x5f,0x38,0x37,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static const sg_shader_desc EnvmapBlend_EnvmapBlend_shader_desc_glsl300es = {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    EnvmapBlend_vs_source_glsl300es, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    EnvmapBlend_fs_source_glsl300es, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        48, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,3},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"envmapPrev",SG_IMAGETYPE_ARRAY},{"blueNoise",SG_IMAGETYPE_2D},{"lighting",SG_IMAGETYPE_2D},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "EnvmapBlend_EnvmapBlend_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_GLES3 */
#if defined(SOKOL_D3D11)
/*
    static float4 gl_Position;
    static float2 v_uv;
    static float2 pos;
    
    struct SPIRV_Cross_Input
    {
        float2 pos : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 v_uv : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    #line 12 ""
    void vert_main()
    {
    #line 12 ""
        v_uv = pos;
    #line 13 ""
        gl_Position = float4((pos.x * 2.0f) - 1.0f, (pos.y * (-2.0f)) + 1.0f, 0.5f, 1.0f);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        pos = stage_input.pos;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.v_uv = v_uv;
        return stage_output;
    }
*/
static const uint8_t EnvmapBlend_vs_bytecode_hlsl5[632] = {
    0x44,0x58,0x42,0x43,0xcd,0x7c,0x5d,0x49,0x00,0xee,0x79,0x09,0x81,0x09,0x77,0x68,
    0x4d,0x4c,0x2f,0x6d,0x01,0x00,0x00,0x00,0x78,0x02,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xa0,0x00,0x00,0x00,0xd4,0x00,0x00,0x00,0x2c,0x01,0x00,0x00,
    0xdc,0x01,0x00,0x00,0x52,0x44,0x45,0x46,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xfe,0xff,
    0x10,0x81,0x00,0x00,0x3c,0x00,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,
    0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,
    0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,0x50,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0c,0x00,0x00,0x41,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0x53,0x56,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x00,0xab,0xab,0xab,0x53,0x48,0x45,0x58,
    0xa8,0x00,0x00,0x00,0x50,0x00,0x01,0x00,0x2a,0x00,0x00,0x00,0x6a,0x08,0x00,0x01,
    0x5f,0x00,0x00,0x03,0x32,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0x32,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x67,0x00,0x00,0x04,0xf2,0x20,0x10,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x32,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0f,
    0x32,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x80,0xbf,0x00,0x00,0x80,0x3f,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x08,0xc2,0x20,0x10,0x00,
    0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x3f,0x00,0x00,0x80,0x3f,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,
    0x94,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
/*
    cbuffer Pixel : register(b0)
    {
        float _21_lightFactor : packoffset(c0);
        float _21_prevLevel : packoffset(c0.y);
        float2 _21_prevShift : packoffset(c0.z);
        float4 _21_uvToLightMad : packoffset(c1);
        float4 _21_uvToBlueNoiseMad : packoffset(c2);
    };
    
    Texture2DArray<float4> envmapPrev : register(t0);
    SamplerState _envmapPrev_sampler : register(s0);
    Texture2D<float4> blueNoise : register(t1);
    SamplerState _blueNoise_sampler : register(s1);
    Texture2D<float4> lighting : register(t2);
    SamplerState _lighting_sampler : register(s2);
    
    static float2 v_uv;
    static float4 o_color;
    
    struct SPIRV_Cross_Input
    {
        float2 v_uv : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 o_color : SV_Target0;
    };
    
    #line 25 ""
    void frag_main()
    {
    #line 25 ""
    #line 27 ""
        float4 _44 = envmapPrev.SampleLevel(_envmapPrev_sampler, float3(v_uv + _21_prevShift, _21_prevLevel), 0.0f);
    #line 33 ""
        float _87 = 0.001000000047497451305389404296875f * clamp((blueNoise.SampleLevel(_blueNoise_sampler, (v_uv * _21_uvToBlueNoiseMad.xy) + _21_uvToBlueNoiseMad.zw, 0.0f).x * 4.0f) + 0.9900000095367431640625f, 0.0f, 1.0f);
    #line 37 ""
        float3 light = 0.0f.xxx;
        float2 _100 = (v_uv * _21_uvToLightMad.xy) + _21_uvToLightMad.zw;
        float2 _106 = clamp(_100, 0.0f.xx, 1.0f.xx);
        bool _109 = all(bool2(_100.x == _106.x, _100.y == _106.y));
        bool _117;
        if (_109)
        {
            _117 = _21_lightFactor > 9.9999997473787516355514526367188e-05f;
        }
        else
        {
            _117 = _109;
        }
        if (_117)
        {
    #line 40 ""
            light = lighting.SampleLevel(_lighting_sampler, _100, 0.0f).xyz * _21_lightFactor;
        }
        o_color = float4(lerp(_44.xyz, light, _87.xxx), clamp(_44.w + _87, 0.0f, 1.0f));
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        v_uv = stage_input.v_uv;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.o_color = o_color;
        return stage_output;
    }
*/
static const uint8_t EnvmapBlend_fs_bytecode_hlsl5[2024] = {
    0x44,0x58,0x42,0x43,0x7b,0x3e,0x2f,0x0a,0xd3,0x91,0x36,0x1f,0xda,0xd8,0x6c,0x70,
    0xeb,0x1e,0xd4,0x42,0x01,0x00,0x00,0x00,0xe8,0x07,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x98,0x03,0x00,0x00,0xcc,0x03,0x00,0x00,0x00,0x04,0x00,0x00,
    0x4c,0x07,0x00,0x00,0x52,0x44,0x45,0x46,0x5c,0x03,0x00,0x00,0x01,0x00,0x00,0x00,
    0x7c,0x01,0x00,0x00,0x07,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xff,0xff,
    0x10,0x81,0x00,0x00,0x31,0x03,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x01,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x30,0x01,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x43,0x01,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x55,0x01,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x60,0x01,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x6a,0x01,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x02,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x73,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5f,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,
    0x72,0x65,0x76,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x00,0x5f,0x62,0x6c,0x75,
    0x65,0x4e,0x6f,0x69,0x73,0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x00,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x00,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,0x72,0x65,0x76,0x00,0x62,0x6c,0x75,0x65,
    0x4e,0x6f,0x69,0x73,0x65,0x00,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x00,0x50,
    0x69,0x78,0x65,0x6c,0x00,0xab,0xab,0xab,0x73,0x01,0x00,0x00,0x05,0x00,0x00,0x00,
    0x94,0x01,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x5c,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x74,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x98,0x02,0x00,0x00,0x04,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x74,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0xa6,0x02,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0xbc,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xe0,0x02,0x00,0x00,0x10,0x00,0x00,0x00,
    0x10,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xf8,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x1c,0x03,0x00,0x00,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0xf8,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x5f,0x32,0x31,0x5f,0x6c,0x69,0x67,0x68,
    0x74,0x46,0x61,0x63,0x74,0x6f,0x72,0x00,0x66,0x6c,0x6f,0x61,0x74,0x00,0xab,0xab,
    0x00,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x6c,0x02,0x00,0x00,0x5f,0x32,0x31,0x5f,0x70,0x72,0x65,0x76,0x4c,0x65,0x76,0x65,
    0x6c,0x00,0x5f,0x32,0x31,0x5f,0x70,0x72,0x65,0x76,0x53,0x68,0x69,0x66,0x74,0x00,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x00,0xab,0x01,0x00,0x03,0x00,0x01,0x00,0x02,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb4,0x02,0x00,0x00,0x5f,0x32,0x31,0x5f,
    0x75,0x76,0x54,0x6f,0x4c,0x69,0x67,0x68,0x74,0x4d,0x61,0x64,0x00,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x00,0x01,0x00,0x03,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xf1,0x02,0x00,0x00,0x5f,0x32,0x31,0x5f,0x75,0x76,0x54,0x6f,
    0x42,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x4d,0x61,0x64,0x00,0x4d,0x69,0x63,
    0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,
    0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,
    0x31,0x30,0x2e,0x31,0x00,0xab,0xab,0xab,0x49,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,
    0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x00,0xab,0xab,
    0x53,0x48,0x45,0x58,0x44,0x03,0x00,0x00,0x50,0x00,0x00,0x00,0xd1,0x00,0x00,0x00,
    0x6a,0x08,0x00,0x01,0x59,0x00,0x00,0x04,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,
    0x5a,0x00,0x00,0x03,0x00,0x60,0x10,0x00,0x01,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,
    0x00,0x60,0x10,0x00,0x02,0x00,0x00,0x00,0x58,0x40,0x00,0x04,0x00,0x70,0x10,0x00,
    0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,
    0x01,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,
    0x02,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x68,0x00,0x00,0x02,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x32,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0xe6,0x8a,0x20,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x06,0x42,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x1a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x48,0x00,0x00,0x8d,0x02,0x02,0x00,0x80,0x43,0x55,0x15,0x00,0xf2,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0b,0x32,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x80,0x20,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0xe6,0x8a,0x20,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x48,0x00,0x00,0x8d,0xc2,0x00,0x00,0x80,0x43,0x55,0x15,0x00,0x12,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x01,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x32,0x20,0x00,0x09,0x12,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x40,
    0x01,0x40,0x00,0x00,0xa4,0x70,0x7d,0x3f,0x38,0x00,0x00,0x07,0x22,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x6f,0x12,0x83,0x3a,0x32,0x00,0x00,0x0b,0xc2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x06,0x14,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x84,0x20,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0xa6,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x36,0x20,0x00,0x05,0x32,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0xe6,0x0a,0x10,0x00,
    0x01,0x00,0x00,0x00,0x18,0x00,0x00,0x07,0x32,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0xe6,0x0a,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x01,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x31,0x00,0x00,0x08,
    0x22,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x17,0xb7,0xd1,0x38,
    0x0a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x07,
    0x12,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x1f,0x00,0x04,0x03,0x0a,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x48,0x00,0x00,0x8d,0xc2,0x00,0x00,0x80,0x43,0x55,0x15,0x00,
    0x72,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0xe6,0x0a,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x7e,0x10,0x00,0x02,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x02,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0x72,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,0x06,0x80,0x20,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x01,0x36,0x00,0x00,0x08,
    0x72,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x01,
    0x00,0x00,0x00,0x08,0x72,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x02,0x10,0x80,
    0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,
    0x32,0x00,0x00,0x09,0x72,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x56,0x05,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x00,0x00,0x00,0x00,0x32,0x20,0x00,0x09,0x82,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x6f,0x12,0x83,0x3a,
    0x3a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,
    0x94,0x00,0x00,0x00,0x17,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
static const sg_shader_desc EnvmapBlend_EnvmapBlend_shader_desc_hlsl5 = {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    0, /* source */
    EnvmapBlend_vs_bytecode_hlsl5, /* bytecode */
    632, /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    0, /* source */
    EnvmapBlend_fs_bytecode_hlsl5, /* bytecode */
    2024, /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        48, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,3},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"envmapPrev",SG_IMAGETYPE_ARRAY},{"blueNoise",SG_IMAGETYPE_2D},{"lighting",SG_IMAGETYPE_2D},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "EnvmapBlend_EnvmapBlend_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_D3D11 */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 v_uv [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 pos [[attribute(0)]];
    };
    
    #line 12 ""
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
    #line 12 ""
        out.v_uv = in.pos;
    #line 13 ""
        out.gl_Position = float4((in.pos.x * 2.0) - 1.0, (in.pos.y * (-2.0)) + 1.0, 0.5, 1.0);
        return out;
    }
    
*/
static const char EnvmapBlend_vs_source_metal_macos[465] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,
    0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x69,0x6e,
    0x2e,0x70,0x6f,0x73,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,
    0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,
    0x69,0x6e,0x2e,0x70,0x6f,0x73,0x2e,0x78,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,
    0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x2e,0x79,
    0x20,0x2a,0x20,0x28,0x2d,0x32,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct Pixel
    {
        float lightFactor;
        float prevLevel;
        float2 prevShift;
        float4 uvToLightMad;
        float4 uvToBlueNoiseMad;
    };
    
    struct main0_out
    {
        float4 o_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 v_uv [[user(locn0)]];
    };
    
    #line 25 ""
    fragment main0_out main0(main0_in in [[stage_in]], constant Pixel& _21 [[buffer(0)]], texture2d_array<float> envmapPrev [[texture(0)]], texture2d<float> blueNoise [[texture(1)]], texture2d<float> lighting [[texture(2)]], sampler envmapPrevSmplr [[sampler(0)]], sampler blueNoiseSmplr [[sampler(1)]], sampler lightingSmplr [[sampler(2)]])
    {
        main0_out out = {};
    #line 25 ""
        float3 _34 = float3(in.v_uv + _21.prevShift, _21.prevLevel);
    #line 27 ""
        float4 _44 = envmapPrev.sample(envmapPrevSmplr, _34.xy, uint(round(_34.z)), level(0.0));
    #line 33 ""
        float _87 = 0.001000000047497451305389404296875 * fast::clamp((blueNoise.sample(blueNoiseSmplr, ((in.v_uv * _21.uvToBlueNoiseMad.xy) + _21.uvToBlueNoiseMad.zw), level(0.0)).x * 4.0) + 0.9900000095367431640625, 0.0, 1.0);
    #line 37 ""
        float3 light = float3(0.0);
        float2 _100 = (in.v_uv * _21.uvToLightMad.xy) + _21.uvToLightMad.zw;
        bool _109 = all(_100 == fast::clamp(_100, float2(0.0), float2(1.0)));
        bool _117;
        if (_109)
        {
            _117 = _21.lightFactor > 9.9999997473787516355514526367188e-05;
        }
        else
        {
            _117 = _109;
        }
        if (_117)
        {
    #line 40 ""
            light = lighting.sample(lightingSmplr, _100, level(0.0)).xyz * _21.lightFactor;
        }
        out.o_color = float4(mix(_44.xyz, light, float3(_87)), fast::clamp(_44.w + _87, 0.0, 1.0));
        return out;
    }
    
*/
static const char EnvmapBlend_fs_source_metal_macos[1705] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x50,
    0x69,0x78,0x65,0x6c,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x46,0x61,0x63,0x74,0x6f,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x72,0x65,0x76,0x4c,0x65,0x76,0x65,
    0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x72,
    0x65,0x76,0x53,0x68,0x69,0x66,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x75,0x76,0x54,0x6f,0x4c,0x69,0x67,0x68,0x74,0x4d,0x61,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x75,0x76,0x54,
    0x6f,0x42,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x4d,0x61,0x64,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x75,
    0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x35,0x20,0x22,0x22,0x0a,0x66,0x72,
    0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,
    0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x50,0x69,0x78,0x65,0x6c,0x26,
    0x20,0x5f,0x32,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,
    0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x65,0x6e,0x76,0x6d,0x61,
    0x70,0x50,0x72,0x65,0x76,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,
    0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x62,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,
    0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x31,0x29,0x5d,0x5d,0x2c,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,
    0x3e,0x20,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x20,0x5b,0x5b,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x32,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x20,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,0x72,0x65,0x76,0x53,0x6d,0x70,
    0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x62,0x6c,0x75,0x65,0x4e,
    0x6f,0x69,0x73,0x65,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x53,0x6d,0x70,0x6c,0x72,0x20,
    0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x32,0x29,0x5d,0x5d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x35,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x5f,0x33,0x34,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,
    0x2e,0x76,0x5f,0x75,0x76,0x20,0x2b,0x20,0x5f,0x32,0x31,0x2e,0x70,0x72,0x65,0x76,
    0x53,0x68,0x69,0x66,0x74,0x2c,0x20,0x5f,0x32,0x31,0x2e,0x70,0x72,0x65,0x76,0x4c,
    0x65,0x76,0x65,0x6c,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x37,0x20,
    0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x34,
    0x34,0x20,0x3d,0x20,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,0x72,0x65,0x76,0x2e,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,0x72,0x65,0x76,
    0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x5f,0x33,0x34,0x2e,0x78,0x79,0x2c,0x20,0x75,
    0x69,0x6e,0x74,0x28,0x72,0x6f,0x75,0x6e,0x64,0x28,0x5f,0x33,0x34,0x2e,0x7a,0x29,
    0x29,0x2c,0x20,0x6c,0x65,0x76,0x65,0x6c,0x28,0x30,0x2e,0x30,0x29,0x29,0x3b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x37,0x20,0x3d,0x20,0x30,0x2e,0x30,0x30,
    0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x34,0x37,0x34,0x39,0x37,0x34,0x35,0x31,
    0x33,0x30,0x35,0x33,0x38,0x39,0x34,0x30,0x34,0x32,0x39,0x36,0x38,0x37,0x35,0x20,
    0x2a,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x62,
    0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,
    0x62,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,
    0x28,0x28,0x69,0x6e,0x2e,0x76,0x5f,0x75,0x76,0x20,0x2a,0x20,0x5f,0x32,0x31,0x2e,
    0x75,0x76,0x54,0x6f,0x42,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x4d,0x61,0x64,
    0x2e,0x78,0x79,0x29,0x20,0x2b,0x20,0x5f,0x32,0x31,0x2e,0x75,0x76,0x54,0x6f,0x42,
    0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x4d,0x61,0x64,0x2e,0x7a,0x77,0x29,0x2c,
    0x20,0x6c,0x65,0x76,0x65,0x6c,0x28,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x20,0x2a,
    0x20,0x34,0x2e,0x30,0x29,0x20,0x2b,0x20,0x30,0x2e,0x39,0x39,0x30,0x30,0x30,0x30,
    0x30,0x30,0x39,0x35,0x33,0x36,0x37,0x34,0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x33,0x37,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x5f,0x31,0x30,0x30,0x20,0x3d,0x20,0x28,0x69,0x6e,0x2e,0x76,
    0x5f,0x75,0x76,0x20,0x2a,0x20,0x5f,0x32,0x31,0x2e,0x75,0x76,0x54,0x6f,0x4c,0x69,
    0x67,0x68,0x74,0x4d,0x61,0x64,0x2e,0x78,0x79,0x29,0x20,0x2b,0x20,0x5f,0x32,0x31,
    0x2e,0x75,0x76,0x54,0x6f,0x4c,0x69,0x67,0x68,0x74,0x4d,0x61,0x64,0x2e,0x7a,0x77,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,0x39,0x20,
    0x3d,0x20,0x61,0x6c,0x6c,0x28,0x5f,0x31,0x30,0x30,0x20,0x3d,0x3d,0x20,0x66,0x61,
    0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x30,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x28,0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x31,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x31,0x30,0x39,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,0x5f,0x32,
    0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x46,0x61,0x63,0x74,0x6f,0x72,0x20,0x3e,0x20,
    0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x34,0x37,0x33,0x37,0x38,0x37,0x35,
    0x31,0x36,0x33,0x35,0x35,0x35,0x31,0x34,0x35,0x32,0x36,0x33,0x36,0x37,0x31,0x38,
    0x38,0x65,0x2d,0x30,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x31,0x31,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x34,0x30,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,
    0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x2e,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x53,
    0x6d,0x70,0x6c,0x72,0x2c,0x20,0x5f,0x31,0x30,0x30,0x2c,0x20,0x6c,0x65,0x76,0x65,
    0x6c,0x28,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x32,
    0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x46,0x61,0x63,0x74,0x6f,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x6f,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x6d,0x69,
    0x78,0x28,0x5f,0x34,0x34,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x38,0x37,0x29,0x29,0x2c,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x34,0x34,0x2e,
    0x77,0x20,0x2b,0x20,0x5f,0x38,0x37,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static const sg_shader_desc EnvmapBlend_EnvmapBlend_shader_desc_metal_macos = {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    EnvmapBlend_vs_source_metal_macos, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main0", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    EnvmapBlend_fs_source_metal_macos, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main0", /* entry */
    { /* uniform blocks */
      {
        48, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,3},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"envmapPrev",SG_IMAGETYPE_ARRAY},{"blueNoise",SG_IMAGETYPE_2D},{"lighting",SG_IMAGETYPE_2D},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "EnvmapBlend_EnvmapBlend_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_METAL */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 v_uv [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 pos [[attribute(0)]];
    };
    
    #line 12 ""
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
    #line 12 ""
        out.v_uv = in.pos;
    #line 13 ""
        out.gl_Position = float4((in.pos.x * 2.0) - 1.0, (in.pos.y * (-2.0)) + 1.0, 0.5, 1.0);
        return out;
    }
    
*/
static const char EnvmapBlend_vs_source_metal_ios[465] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,
    0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x69,0x6e,
    0x2e,0x70,0x6f,0x73,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,
    0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,
    0x69,0x6e,0x2e,0x70,0x6f,0x73,0x2e,0x78,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,
    0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x2e,0x79,
    0x20,0x2a,0x20,0x28,0x2d,0x32,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct Pixel
    {
        float lightFactor;
        float prevLevel;
        float2 prevShift;
        float4 uvToLightMad;
        float4 uvToBlueNoiseMad;
    };
    
    struct main0_out
    {
        float4 o_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 v_uv [[user(locn0)]];
    };
    
    #line 25 ""
    fragment main0_out main0(main0_in in [[stage_in]], constant Pixel& _21 [[buffer(0)]], texture2d_array<float> envmapPrev [[texture(0)]], texture2d<float> blueNoise [[texture(1)]], texture2d<float> lighting [[texture(2)]], sampler envmapPrevSmplr [[sampler(0)]], sampler blueNoiseSmplr [[sampler(1)]], sampler lightingSmplr [[sampler(2)]])
    {
        main0_out out = {};
    #line 25 ""
        float3 _34 = float3(in.v_uv + _21.prevShift, _21.prevLevel);
    #line 27 ""
        float4 _44 = envmapPrev.sample(envmapPrevSmplr, _34.xy, uint(round(_34.z)), level(0.0));
    #line 33 ""
        float _87 = 0.001000000047497451305389404296875 * fast::clamp((blueNoise.sample(blueNoiseSmplr, ((in.v_uv * _21.uvToBlueNoiseMad.xy) + _21.uvToBlueNoiseMad.zw), level(0.0)).x * 4.0) + 0.9900000095367431640625, 0.0, 1.0);
    #line 37 ""
        float3 light = float3(0.0);
        float2 _100 = (in.v_uv * _21.uvToLightMad.xy) + _21.uvToLightMad.zw;
        bool _109 = all(_100 == fast::clamp(_100, float2(0.0), float2(1.0)));
        bool _117;
        if (_109)
        {
            _117 = _21.lightFactor > 9.9999997473787516355514526367188e-05;
        }
        else
        {
            _117 = _109;
        }
        if (_117)
        {
    #line 40 ""
            light = lighting.sample(lightingSmplr, _100, level(0.0)).xyz * _21.lightFactor;
        }
        out.o_color = float4(mix(_44.xyz, light, float3(_87)), fast::clamp(_44.w + _87, 0.0, 1.0));
        return out;
    }
    
*/
static const char EnvmapBlend_fs_source_metal_ios[1705] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x50,
    0x69,0x78,0x65,0x6c,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x46,0x61,0x63,0x74,0x6f,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x72,0x65,0x76,0x4c,0x65,0x76,0x65,
    0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x72,
    0x65,0x76,0x53,0x68,0x69,0x66,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x75,0x76,0x54,0x6f,0x4c,0x69,0x67,0x68,0x74,0x4d,0x61,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x75,0x76,0x54,
    0x6f,0x42,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x4d,0x61,0x64,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x75,
    0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x35,0x20,0x22,0x22,0x0a,0x66,0x72,
    0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,
    0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x50,0x69,0x78,0x65,0x6c,0x26,
    0x20,0x5f,0x32,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,
    0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x65,0x6e,0x76,0x6d,0x61,
    0x70,0x50,0x72,0x65,0x76,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,
    0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x62,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,
    0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x31,0x29,0x5d,0x5d,0x2c,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,
    0x3e,0x20,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x20,0x5b,0x5b,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x32,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x20,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,0x72,0x65,0x76,0x53,0x6d,0x70,
    0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x62,0x6c,0x75,0x65,0x4e,
    0x6f,0x69,0x73,0x65,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x53,0x6d,0x70,0x6c,0x72,0x20,
    0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x32,0x29,0x5d,0x5d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x35,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x5f,0x33,0x34,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,
    0x2e,0x76,0x5f,0x75,0x76,0x20,0x2b,0x20,0x5f,0x32,0x31,0x2e,0x70,0x72,0x65,0x76,
    0x53,0x68,0x69,0x66,0x74,0x2c,0x20,0x5f,0x32,0x31,0x2e,0x70,0x72,0x65,0x76,0x4c,
    0x65,0x76,0x65,0x6c,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x37,0x20,
    0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x34,
    0x34,0x20,0x3d,0x20,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,0x72,0x65,0x76,0x2e,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x65,0x6e,0x76,0x6d,0x61,0x70,0x50,0x72,0x65,0x76,
    0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x5f,0x33,0x34,0x2e,0x78,0x79,0x2c,0x20,0x75,
    0x69,0x6e,0x74,0x28,0x72,0x6f,0x75,0x6e,0x64,0x28,0x5f,0x33,0x34,0x2e,0x7a,0x29,
    0x29,0x2c,0x20,0x6c,0x65,0x76,0x65,0x6c,0x28,0x30,0x2e,0x30,0x29,0x29,0x3b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x37,0x20,0x3d,0x20,0x30,0x2e,0x30,0x30,
    0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x34,0x37,0x34,0x39,0x37,0x34,0x35,0x31,
    0x33,0x30,0x35,0x33,0x38,0x39,0x34,0x30,0x34,0x32,0x39,0x36,0x38,0x37,0x35,0x20,
    0x2a,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x62,
    0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,
    0x62,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,
    0x28,0x28,0x69,0x6e,0x2e,0x76,0x5f,0x75,0x76,0x20,0x2a,0x20,0x5f,0x32,0x31,0x2e,
    0x75,0x76,0x54,0x6f,0x42,0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x4d,0x61,0x64,
    0x2e,0x78,0x79,0x29,0x20,0x2b,0x20,0x5f,0x32,0x31,0x2e,0x75,0x76,0x54,0x6f,0x42,
    0x6c,0x75,0x65,0x4e,0x6f,0x69,0x73,0x65,0x4d,0x61,0x64,0x2e,0x7a,0x77,0x29,0x2c,
    0x20,0x6c,0x65,0x76,0x65,0x6c,0x28,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x20,0x2a,
    0x20,0x34,0x2e,0x30,0x29,0x20,0x2b,0x20,0x30,0x2e,0x39,0x39,0x30,0x30,0x30,0x30,
    0x30,0x30,0x39,0x35,0x33,0x36,0x37,0x34,0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x33,0x37,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x5f,0x31,0x30,0x30,0x20,0x3d,0x20,0x28,0x69,0x6e,0x2e,0x76,
    0x5f,0x75,0x76,0x20,0x2a,0x20,0x5f,0x32,0x31,0x2e,0x75,0x76,0x54,0x6f,0x4c,0x69,
    0x67,0x68,0x74,0x4d,0x61,0x64,0x2e,0x78,0x79,0x29,0x20,0x2b,0x20,0x5f,0x32,0x31,
    0x2e,0x75,0x76,0x54,0x6f,0x4c,0x69,0x67,0x68,0x74,0x4d,0x61,0x64,0x2e,0x7a,0x77,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,0x39,0x20,
    0x3d,0x20,0x61,0x6c,0x6c,0x28,0x5f,0x31,0x30,0x30,0x20,0x3d,0x3d,0x20,0x66,0x61,
    0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x30,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x28,0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x31,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x31,0x30,0x39,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,0x5f,0x32,
    0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x46,0x61,0x63,0x74,0x6f,0x72,0x20,0x3e,0x20,
    0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x34,0x37,0x33,0x37,0x38,0x37,0x35,
    0x31,0x36,0x33,0x35,0x35,0x35,0x31,0x34,0x35,0x32,0x36,0x33,0x36,0x37,0x31,0x38,
    0x38,0x65,0x2d,0x30,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x31,0x31,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x34,0x30,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,
    0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x2e,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x6c,0x69,0x67,0x68,0x74,0x69,0x6e,0x67,0x53,
    0x6d,0x70,0x6c,0x72,0x2c,0x20,0x5f,0x31,0x30,0x30,0x2c,0x20,0x6c,0x65,0x76,0x65,
    0x6c,0x28,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x32,
    0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x46,0x61,0x63,0x74,0x6f,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x6f,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x6d,0x69,
    0x78,0x28,0x5f,0x34,0x34,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x38,0x37,0x29,0x29,0x2c,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x34,0x34,0x2e,
    0x77,0x20,0x2b,0x20,0x5f,0x38,0x37,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static const sg_shader_desc EnvmapBlend_EnvmapBlend_shader_desc_metal_ios = {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    EnvmapBlend_vs_source_metal_ios, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main0", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    EnvmapBlend_fs_source_metal_ios, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main0", /* entry */
    { /* uniform blocks */
      {
        48, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,3},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"envmapPrev",SG_IMAGETYPE_ARRAY},{"blueNoise",SG_IMAGETYPE_2D},{"lighting",SG_IMAGETYPE_2D},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "EnvmapBlend_EnvmapBlend_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_METAL */
const sg_shader_desc* EnvmapBlend_EnvmapBlend_shader_desc(void) {
    #if defined(SOKOL_GLCORE33)
    if (sg_query_backend() == SG_BACKEND_GLCORE33) {
        return &EnvmapBlend_EnvmapBlend_shader_desc_glsl330;
    }
    #endif /* SOKOL_GLCORE33 */
    #if defined(SOKOL_GLES3)
    if (sg_query_backend() == SG_BACKEND_GLES3) {
        return &EnvmapBlend_EnvmapBlend_shader_desc_glsl300es;
    }
    #endif /* SOKOL_GLES3 */
    #if defined(SOKOL_D3D11)
    if (sg_query_backend() == SG_BACKEND_D3D11) {
        return &EnvmapBlend_EnvmapBlend_shader_desc_hlsl5;
    }
    #endif /* SOKOL_D3D11 */
    #if defined(SOKOL_METAL)
    if (sg_query_backend() == SG_BACKEND_METAL_MACOS) {
        return &EnvmapBlend_EnvmapBlend_shader_desc_metal_macos;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (sg_query_backend() == SG_BACKEND_METAL_IOS) {
        return &EnvmapBlend_EnvmapBlend_shader_desc_metal_ios;
    }
    #endif /* SOKOL_METAL */
    return 0; /* can't happen */
}
#endif /* SOKOL_SHDC_IMPL */
