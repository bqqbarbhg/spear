#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'TestMesh':
            Get shader desc: TestMesh_TestMesh_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_TestMesh_vs_position = 0
                    ATTR_TestMesh_vs_normal = 1
                    ATTR_TestMesh_vs_tangent = 2
                    ATTR_TestMesh_vs_uv = 3
                Uniform block 'Transform':
                    C struct: TestMesh_Transform_t
                    Bind slot: SLOT_TestMesh_Transform = 0
            Fragment shader: fs
                Uniform block 'Pixel':
                    C struct: TestMesh_Pixel_t
                    Bind slot: SLOT_TestMesh_Pixel = 0
                Image 'shadowGrid':
                    Type: SG_IMAGETYPE_ARRAY
                    Bind slot: SLOT_TestMesh_shadowGrid = 0


    Shader descriptor structs:

        sg_shader TestMesh = sg_make_shader(TestMesh_TestMesh_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_TestMesh_vs_position] = { ... },
                    [ATTR_TestMesh_vs_normal] = { ... },
                    [ATTR_TestMesh_vs_tangent] = { ... },
                    [ATTR_TestMesh_vs_uv] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_TestMesh_shadowGrid = 0;

    Bind slot and C-struct for uniform block 'Transform':

        TestMesh_Transform_t Transform = {
            .transform = ...;
            .normalTransform = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_TestMesh_Transform, &Transform, sizeof(Transform));

    Bind slot and C-struct for uniform block 'Pixel':

        TestMesh_Pixel_t Pixel = {
            .numLightsF = ...;
            .lightData = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_TestMesh_Pixel, &Pixel, sizeof(Pixel));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before TestMesh.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
const sg_shader_desc* TestMesh_TestMesh_shader_desc(void);
#define ATTR_TestMesh_vs_position (0)
#define ATTR_TestMesh_vs_normal (1)
#define ATTR_TestMesh_vs_tangent (2)
#define ATTR_TestMesh_vs_uv (3)
#define SLOT_TestMesh_shadowGrid (0)
#define SLOT_TestMesh_Transform (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct TestMesh_Transform_t {
    float transform[16];
    float normalTransform[16];
} TestMesh_Transform_t;
#pragma pack(pop)
#define SLOT_TestMesh_Pixel (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct TestMesh_Pixel_t {
    float numLightsF;
    uint8_t _pad_4[12];
    float lightData[64][4];
} TestMesh_Pixel_t;
#pragma pack(pop)
#if defined(SOKOL_SHDC_IMPL)
#if defined(SOKOL_GLCORE33)
/*
    #version 330
    
    uniform vec4 Transform[8];
    out vec3 v_position;
    layout(location = 0) in vec3 position;
    out vec3 v_normal;
    layout(location = 1) in vec3 normal;
    layout(location = 2) in vec3 tangent;
    layout(location = 3) in vec2 uv;
    
    void main()
    {
        v_position = position;
        gl_Position = mat4(Transform[0], Transform[1], Transform[2], Transform[3]) * vec4(position, 1.0);
        v_normal = normalize((mat4(Transform[4], Transform[5], Transform[6], Transform[7]) * vec4(normal, 0.0)).xyz);
    }
    
*/
static const char TestMesh_vs_source_glsl330[490] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x54,0x72,0x61,0x6e,0x73,
    0x66,0x6f,0x72,0x6d,0x5b,0x38,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x65,0x6e,
    0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,
    0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x30,
    0x5d,0x2c,0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x2c,
    0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x32,0x5d,0x2c,0x20,0x54,
    0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x6d,0x61,
    0x74,0x34,0x28,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x34,0x5d,0x2c,
    0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x35,0x5d,0x2c,0x20,0x54,
    0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x36,0x5d,0x2c,0x20,0x54,0x72,0x61,
    0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,
    0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 Pixel[65];
    uniform sampler2DArray shadowGrid;
    
    in vec3 v_position;
    in vec3 v_normal;
    layout(location = 0) out vec4 o_color;
    
    vec3 evalLight(vec3 P, vec3 N, int base)
    {
        vec3 _74 = Pixel[base * 1 + 1].xyz - P;
        float _78 = dot(_74, _74);
        float _88 = Pixel[base * 1 + 1].w * Pixel[base * 1 + 1].w;
        vec3 result;
        if (_78 < _88)
        {
            vec3 _109 = (_74 * Pixel[(base + 2) * 1 + 1].xyz) + Pixel[(base + 3) * 1 + 1].xyz;
            float _115 = _109.y * 8.0;
            float _121 = clamp(floor(_115), 0.0, 7.0);
            float _141 = _109.x;
            result = ((vec3(mix(textureLod(shadowGrid, vec3(_141, _109.z, _121), 0.0).x, textureLod(shadowGrid, vec3(_141, _109.z, min(_121 + 1.0, 7.0)), 0.0).x, _115 - _121)) * dot(N, _74 / vec3(sqrt(_78)))) * ((1.0 / (0.100000001490116119384765625 + _78)) - (1.0 / (0.100000001490116119384765625 + _88)))) * Pixel[(base + 1) * 1 + 1].xyz;
        }
        else
        {
            result = vec3(0.0);
        }
        return result;
    }
    
    float linearToSrgb(inout float x)
    {
        x = clamp(x, 0.0, 1.0);
        if (x <= 0.00031308000325225293636322021484375)
        {
            return 12.9200000762939453125 * x;
        }
        else
        {
            return (1.05499994754791259765625 * pow(x, 0.4166666567325592041015625)) - 0.054999999701976776123046875;
        }
    }
    
    vec3 linearToSrgb(vec3 v)
    {
        float param = v.x;
        float _211 = linearToSrgb(param);
        float param_1 = v.y;
        float _215 = linearToSrgb(param_1);
        float param_2 = v.z;
        float _220 = linearToSrgb(param_2);
        return vec3(_211, _215, _220);
    }
    
    vec4 tonemap(vec3 v)
    {
        vec3 param = v / (vec3(1.0) + v);
        vec3 _232 = linearToSrgb(param);
        return vec4(_232, dot(_232, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625)));
    }
    
    void main()
    {
        vec3 result = vec3(0.0);
        for (int base = 0; base < (int(Pixel[0].x) * 4); base += 4)
        {
            vec3 param = v_position;
            vec3 param_1 = normalize(v_normal);
            int param_2 = base;
            result += evalLight(param, param_1, param_2);
        }
        vec3 param_3 = result;
        o_color = tonemap(param_3);
    }
    
*/
static const char TestMesh_fs_source_glsl330[2130] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x50,0x69,0x78,0x65,0x6c,
    0x5b,0x36,0x35,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x20,0x73,0x68,0x61,
    0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x65,0x76,0x61,
    0x6c,0x4c,0x69,0x67,0x68,0x74,0x28,0x76,0x65,0x63,0x33,0x20,0x50,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x20,0x4e,0x2c,0x20,0x69,0x6e,0x74,0x20,0x62,0x61,0x73,0x65,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x37,0x34,0x20,
    0x3d,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x62,0x61,0x73,0x65,0x20,0x2a,0x20,0x31,
    0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2d,0x20,0x50,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x38,0x20,0x3d,0x20,0x64,
    0x6f,0x74,0x28,0x5f,0x37,0x34,0x2c,0x20,0x5f,0x37,0x34,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x38,0x20,0x3d,0x20,0x50,0x69,
    0x78,0x65,0x6c,0x5b,0x62,0x61,0x73,0x65,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,
    0x5d,0x2e,0x77,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x62,0x61,0x73,0x65,
    0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x37,0x38,0x20,0x3c,0x20,0x5f,0x38,0x38,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x31,0x30,0x39,0x20,0x3d,0x20,0x28,0x5f,0x37,0x34,0x20,
    0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x28,0x62,0x61,0x73,0x65,0x20,0x2b,0x20,
    0x32,0x29,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,
    0x20,0x2b,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x28,0x62,0x61,0x73,0x65,0x20,0x2b,
    0x20,0x33,0x29,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x31,0x35,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x2e,0x79,0x20,0x2a,0x20,
    0x38,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,
    0x66,0x6c,0x6f,0x6f,0x72,0x28,0x5f,0x31,0x31,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x37,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x5f,0x31,0x30,
    0x39,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x28,0x76,0x65,0x63,0x33,0x28,0x6d,0x69,0x78,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x73,0x68,0x61,0x64,
    0x6f,0x77,0x47,0x72,0x69,0x64,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x31,0x34,
    0x31,0x2c,0x20,0x5f,0x31,0x30,0x39,0x2e,0x7a,0x2c,0x20,0x5f,0x31,0x32,0x31,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x4c,0x6f,0x64,0x28,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x31,0x34,0x31,0x2c,0x20,0x5f,0x31,0x30,0x39,
    0x2e,0x7a,0x2c,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x32,0x31,0x20,0x2b,0x20,0x31,
    0x2e,0x30,0x2c,0x20,0x37,0x2e,0x30,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,
    0x78,0x2c,0x20,0x5f,0x31,0x31,0x35,0x20,0x2d,0x20,0x5f,0x31,0x32,0x31,0x29,0x29,
    0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x4e,0x2c,0x20,0x5f,0x37,0x34,0x20,0x2f,0x20,
    0x76,0x65,0x63,0x33,0x28,0x73,0x71,0x72,0x74,0x28,0x5f,0x37,0x38,0x29,0x29,0x29,
    0x29,0x20,0x2a,0x20,0x28,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x30,0x2e,0x31,
    0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,
    0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2b,0x20,0x5f,0x37,0x38,
    0x29,0x29,0x20,0x2d,0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x30,0x2e,0x31,
    0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,
    0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2b,0x20,0x5f,0x38,0x38,
    0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x28,0x62,0x61,
    0x73,0x65,0x20,0x2b,0x20,0x31,0x29,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,
    0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,
    0x6f,0x53,0x72,0x67,0x62,0x28,0x69,0x6e,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x78,0x20,0x3d,0x20,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x78,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x78,0x20,0x3c,0x3d,0x20,
    0x30,0x2e,0x30,0x30,0x30,0x33,0x31,0x33,0x30,0x38,0x30,0x30,0x30,0x33,0x32,0x35,
    0x32,0x32,0x35,0x32,0x39,0x33,0x36,0x33,0x36,0x33,0x32,0x32,0x30,0x32,0x31,0x34,
    0x38,0x34,0x33,0x37,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x31,0x32,0x2e,0x39,
    0x32,0x30,0x30,0x30,0x30,0x30,0x37,0x36,0x32,0x39,0x33,0x39,0x34,0x35,0x33,0x31,
    0x32,0x35,0x20,0x2a,0x20,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x31,0x2e,0x30,
    0x35,0x34,0x39,0x39,0x39,0x39,0x34,0x37,0x35,0x34,0x37,0x39,0x31,0x32,0x35,0x39,
    0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x78,0x2c,0x20,
    0x30,0x2e,0x34,0x31,0x36,0x36,0x36,0x36,0x36,0x35,0x36,0x37,0x33,0x32,0x35,0x35,
    0x39,0x32,0x30,0x34,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x29,0x29,0x20,0x2d,0x20,
    0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,0x39,0x37,
    0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x6e,
    0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x76,0x65,0x63,0x33,0x20,0x76,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x20,0x3d,0x20,0x76,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x31,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,
    0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x20,0x3d,0x20,0x76,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x35,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,
    0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x32,0x20,0x3d,0x20,0x76,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x30,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,
    0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x28,0x5f,0x32,0x31,0x31,0x2c,0x20,0x5f,0x32,0x31,0x35,0x2c,0x20,0x5f,
    0x32,0x32,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x34,0x20,0x74,0x6f,
    0x6e,0x65,0x6d,0x61,0x70,0x28,0x76,0x65,0x63,0x33,0x20,0x76,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x76,0x20,0x2f,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x20,
    0x2b,0x20,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x32,0x33,0x32,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,
    0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x33,0x32,0x2c,
    0x20,0x64,0x6f,0x74,0x28,0x5f,0x32,0x33,0x32,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,
    0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,
    0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,
    0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,
    0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,
    0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,
    0x28,0x69,0x6e,0x74,0x20,0x62,0x61,0x73,0x65,0x20,0x3d,0x20,0x30,0x3b,0x20,0x62,
    0x61,0x73,0x65,0x20,0x3c,0x20,0x28,0x69,0x6e,0x74,0x28,0x50,0x69,0x78,0x65,0x6c,
    0x5b,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x29,0x3b,0x20,0x62,0x61,0x73,
    0x65,0x20,0x2b,0x3d,0x20,0x34,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x20,0x3d,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,
    0x20,0x62,0x61,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x20,0x2b,0x3d,0x20,0x65,0x76,0x61,0x6c,0x4c,0x69,0x67,
    0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x6f,0x6e,0x65,
    0x6d,0x61,0x70,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
static const sg_shader_desc TestMesh_TestMesh_shader_desc_glsl330 = {
  0, /* _start_canary */
  { /*attrs*/{"position","TEXCOORD",0},{"normal","TEXCOORD",1},{"tangent","TEXCOORD",2},{"uv","TEXCOORD",3},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    TestMesh_vs_source_glsl330, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        128, /* size */
        { /* uniforms */{"Transform",SG_UNIFORMTYPE_FLOAT4,8},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    TestMesh_fs_source_glsl330, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        1040, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,65},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"shadowGrid",SG_IMAGETYPE_ARRAY},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "TestMesh_TestMesh_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_GLCORE33 */
#if defined(SOKOL_GLES3)
/*
    #version 300 es
    
    uniform vec4 Transform[8];
    out vec3 v_position;
    layout(location = 0) in vec3 position;
    out vec3 v_normal;
    layout(location = 1) in vec3 normal;
    layout(location = 2) in vec3 tangent;
    layout(location = 3) in vec2 uv;
    
    void main()
    {
        v_position = position;
        gl_Position = mat4(Transform[0], Transform[1], Transform[2], Transform[3]) * vec4(position, 1.0);
        v_normal = normalize((mat4(Transform[4], Transform[5], Transform[6], Transform[7]) * vec4(normal, 0.0)).xyz);
    }
    
*/
static const char TestMesh_vs_source_glsl300es[493] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x54,0x72,
    0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x38,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,
    0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,
    0x67,0x65,0x6e,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,
    0x6d,0x5b,0x30,0x5d,0x2c,0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,
    0x31,0x5d,0x2c,0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x32,0x5d,
    0x2c,0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x33,0x5d,0x29,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x28,0x6d,0x61,0x74,0x34,0x28,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,
    0x34,0x5d,0x2c,0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x35,0x5d,
    0x2c,0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x36,0x5d,0x2c,0x20,
    0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 Pixel[65];
    uniform highp sampler2DArray shadowGrid;
    
    in highp vec3 v_position;
    in highp vec3 v_normal;
    layout(location = 0) out highp vec4 o_color;
    
    highp vec3 evalLight(highp vec3 P, highp vec3 N, int base)
    {
        highp vec3 _74 = Pixel[base * 1 + 1].xyz - P;
        highp float _78 = dot(_74, _74);
        highp float _88 = Pixel[base * 1 + 1].w * Pixel[base * 1 + 1].w;
        highp vec3 result;
        if (_78 < _88)
        {
            highp vec3 _109 = (_74 * Pixel[(base + 2) * 1 + 1].xyz) + Pixel[(base + 3) * 1 + 1].xyz;
            highp float _115 = _109.y * 8.0;
            highp float _121 = clamp(floor(_115), 0.0, 7.0);
            highp float _141 = _109.x;
            result = ((vec3(mix(textureLod(shadowGrid, vec3(_141, _109.z, _121), 0.0).x, textureLod(shadowGrid, vec3(_141, _109.z, min(_121 + 1.0, 7.0)), 0.0).x, _115 - _121)) * dot(N, _74 / vec3(sqrt(_78)))) * ((1.0 / (0.100000001490116119384765625 + _78)) - (1.0 / (0.100000001490116119384765625 + _88)))) * Pixel[(base + 1) * 1 + 1].xyz;
        }
        else
        {
            result = vec3(0.0);
        }
        return result;
    }
    
    highp float linearToSrgb(inout highp float x)
    {
        x = clamp(x, 0.0, 1.0);
        if (x <= 0.00031308000325225293636322021484375)
        {
            return 12.9200000762939453125 * x;
        }
        else
        {
            return (1.05499994754791259765625 * pow(x, 0.4166666567325592041015625)) - 0.054999999701976776123046875;
        }
    }
    
    highp vec3 linearToSrgb(highp vec3 v)
    {
        highp float param = v.x;
        highp float _211 = linearToSrgb(param);
        highp float param_1 = v.y;
        highp float _215 = linearToSrgb(param_1);
        highp float param_2 = v.z;
        highp float _220 = linearToSrgb(param_2);
        return vec3(_211, _215, _220);
    }
    
    highp vec4 tonemap(highp vec3 v)
    {
        highp vec3 param = v / (vec3(1.0) + v);
        highp vec3 _232 = linearToSrgb(param);
        return vec4(_232, dot(_232, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625)));
    }
    
    void main()
    {
        highp vec3 result = vec3(0.0);
        for (int base = 0; base < (int(Pixel[0].x) * 4); base += 4)
        {
            highp vec3 param = v_position;
            highp vec3 param_1 = normalize(v_normal);
            int param_2 = base;
            result += evalLight(param, param_1, param_2);
        }
        highp vec3 param_3 = result;
        o_color = tonemap(param_3);
    }
    
*/
static const char TestMesh_fs_source_glsl300es[2383] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x36,0x35,0x5d,0x3b,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,
    0x47,0x72,0x69,0x64,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x76,
    0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x65,0x76,0x61,0x6c,0x4c,0x69,0x67,0x68,0x74,0x28,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x50,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x4e,0x2c,0x20,0x69,0x6e,0x74,0x20,0x62,0x61,0x73,0x65,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x62,
    0x61,0x73,0x65,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,
    0x20,0x2d,0x20,0x50,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x38,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,
    0x5f,0x37,0x34,0x2c,0x20,0x5f,0x37,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x38,0x20,0x3d,
    0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x62,0x61,0x73,0x65,0x20,0x2a,0x20,0x31,0x20,
    0x2b,0x20,0x31,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x62,
    0x61,0x73,0x65,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,0x2e,0x77,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x37,0x38,0x20,0x3c,0x20,0x5f,0x38,0x38,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x31,0x30,0x39,0x20,0x3d,0x20,0x28,0x5f,0x37,0x34,0x20,0x2a,
    0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x28,0x62,0x61,0x73,0x65,0x20,0x2b,0x20,0x32,
    0x29,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2b,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x28,0x62,0x61,0x73,0x65,0x20,0x2b,0x20,
    0x33,0x29,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x35,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,
    0x2e,0x79,0x20,0x2a,0x20,0x38,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x32,0x31,0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x66,0x6c,0x6f,0x6f,0x72,
    0x28,0x5f,0x31,0x31,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x37,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x5f,0x31,
    0x30,0x39,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x28,0x76,0x65,0x63,0x33,0x28,0x6d,0x69,
    0x78,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x73,0x68,0x61,
    0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x31,
    0x34,0x31,0x2c,0x20,0x5f,0x31,0x30,0x39,0x2e,0x7a,0x2c,0x20,0x5f,0x31,0x32,0x31,
    0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x4c,0x6f,0x64,0x28,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x31,0x34,0x31,0x2c,0x20,0x5f,0x31,0x30,
    0x39,0x2e,0x7a,0x2c,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x32,0x31,0x20,0x2b,0x20,
    0x31,0x2e,0x30,0x2c,0x20,0x37,0x2e,0x30,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x2e,0x78,0x2c,0x20,0x5f,0x31,0x31,0x35,0x20,0x2d,0x20,0x5f,0x31,0x32,0x31,0x29,
    0x29,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x4e,0x2c,0x20,0x5f,0x37,0x34,0x20,0x2f,
    0x20,0x76,0x65,0x63,0x33,0x28,0x73,0x71,0x72,0x74,0x28,0x5f,0x37,0x38,0x29,0x29,
    0x29,0x29,0x20,0x2a,0x20,0x28,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x30,0x2e,
    0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,
    0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2b,0x20,0x5f,0x37,
    0x38,0x29,0x29,0x20,0x2d,0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x30,0x2e,
    0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,
    0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2b,0x20,0x5f,0x38,
    0x38,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x50,0x69,0x78,0x65,0x6c,0x5b,0x28,0x62,
    0x61,0x73,0x65,0x20,0x2b,0x20,0x31,0x29,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,
    0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x69,0x6e,0x6f,
    0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x78,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x78,0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,
    0x70,0x28,0x78,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x78,0x20,0x3c,0x3d,0x20,0x30,0x2e,0x30,
    0x30,0x30,0x33,0x31,0x33,0x30,0x38,0x30,0x30,0x30,0x33,0x32,0x35,0x32,0x32,0x35,
    0x32,0x39,0x33,0x36,0x33,0x36,0x33,0x32,0x32,0x30,0x32,0x31,0x34,0x38,0x34,0x33,
    0x37,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x31,0x32,0x2e,0x39,0x32,0x30,0x30,
    0x30,0x30,0x30,0x37,0x36,0x32,0x39,0x33,0x39,0x34,0x35,0x33,0x31,0x32,0x35,0x20,
    0x2a,0x20,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x31,0x2e,0x30,0x35,0x34,0x39,
    0x39,0x39,0x39,0x34,0x37,0x35,0x34,0x37,0x39,0x31,0x32,0x35,0x39,0x37,0x36,0x35,
    0x36,0x32,0x35,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x78,0x2c,0x20,0x30,0x2e,0x34,
    0x31,0x36,0x36,0x36,0x36,0x36,0x35,0x36,0x37,0x33,0x32,0x35,0x35,0x39,0x32,0x30,
    0x34,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x29,0x29,0x20,0x2d,0x20,0x30,0x2e,0x30,
    0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,0x39,0x37,0x36,0x37,0x37,
    0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x20,0x3d,0x20,0x76,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x31,0x20,0x3d,
    0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,
    0x76,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x35,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,
    0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x76,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x32,0x32,0x30,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,
    0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,0x28,
    0x5f,0x32,0x31,0x31,0x2c,0x20,0x5f,0x32,0x31,0x35,0x2c,0x20,0x5f,0x32,0x32,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x74,0x6f,0x6e,0x65,0x6d,0x61,0x70,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x76,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x76,0x20,0x2f,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x20,0x2b,
    0x20,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x32,0x33,0x32,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,
    0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x34,0x28,
    0x5f,0x32,0x33,0x32,0x2c,0x20,0x64,0x6f,0x74,0x28,0x5f,0x32,0x33,0x32,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,
    0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,
    0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,
    0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,
    0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,
    0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,
    0x62,0x61,0x73,0x65,0x20,0x3d,0x20,0x30,0x3b,0x20,0x62,0x61,0x73,0x65,0x20,0x3c,
    0x20,0x28,0x69,0x6e,0x74,0x28,0x50,0x69,0x78,0x65,0x6c,0x5b,0x30,0x5d,0x2e,0x78,
    0x29,0x20,0x2a,0x20,0x34,0x29,0x3b,0x20,0x62,0x61,0x73,0x65,0x20,0x2b,0x3d,0x20,
    0x34,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3d,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x62,0x61,0x73,0x65,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x2b,0x3d,0x20,
    0x65,0x76,0x61,0x6c,0x4c,0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,
    0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x6f,0x6e,0x65,0x6d,0x61,0x70,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static const sg_shader_desc TestMesh_TestMesh_shader_desc_glsl300es = {
  0, /* _start_canary */
  { /*attrs*/{"position","TEXCOORD",0},{"normal","TEXCOORD",1},{"tangent","TEXCOORD",2},{"uv","TEXCOORD",3},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    TestMesh_vs_source_glsl300es, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        128, /* size */
        { /* uniforms */{"Transform",SG_UNIFORMTYPE_FLOAT4,8},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    TestMesh_fs_source_glsl300es, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        1040, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,65},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"shadowGrid",SG_IMAGETYPE_ARRAY},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "TestMesh_TestMesh_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_GLES3 */
#if defined(SOKOL_D3D11)
/*
    cbuffer Transform : register(b0)
    {
        row_major float4x4 _26_transform : packoffset(c0);
        row_major float4x4 _26_normalTransform : packoffset(c4);
    };
    
    
    static float4 gl_Position;
    static float3 v_position;
    static float3 position;
    static float3 v_normal;
    static float3 normal;
    static float3 tangent;
    static float2 uv;
    
    struct SPIRV_Cross_Input
    {
        float3 position : TEXCOORD0;
        float3 normal : TEXCOORD1;
        float3 tangent : TEXCOORD2;
        float2 uv : TEXCOORD3;
    };
    
    struct SPIRV_Cross_Output
    {
        float3 v_position : TEXCOORD0;
        float3 v_normal : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };
    
    #line 22 ""
    void vert_main()
    {
    #line 22 ""
        v_position = position;
    #line 23 ""
        gl_Position = mul(float4(position, 1.0f), _26_transform);
    #line 24 ""
        v_normal = normalize(mul(float4(normal, 0.0f), _26_normalTransform).xyz);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        position = stage_input.position;
        normal = stage_input.normal;
        tangent = stage_input.tangent;
        uv = stage_input.uv;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.v_position = v_position;
        stage_output.v_normal = v_normal;
        return stage_output;
    }
*/
static const uint8_t TestMesh_vs_bytecode_hlsl5[1244] = {
    0x44,0x58,0x42,0x43,0x06,0xe9,0x71,0x31,0xa6,0xf1,0x8c,0xa1,0xd1,0x50,0x65,0xe1,
    0x8d,0xd2,0x9a,0x6d,0x01,0x00,0x00,0x00,0xdc,0x04,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x84,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x70,0x02,0x00,0x00,
    0x40,0x04,0x00,0x00,0x52,0x44,0x45,0x46,0x48,0x01,0x00,0x00,0x01,0x00,0x00,0x00,
    0x68,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xfe,0xff,
    0x10,0x81,0x00,0x00,0x20,0x01,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,
    0x6d,0x00,0xab,0xab,0x5c,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x80,0x00,0x00,0x00,
    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd0,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xe8,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0x0c,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0xe8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x5f,0x32,0x36,0x5f,
    0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x00,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x78,0x34,0x00,0xab,0x02,0x00,0x03,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xde,0x00,0x00,0x00,0x5f,0x32,0x36,0x5f,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x00,0x4d,0x69,0x63,0x72,
    0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,
    0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,
    0x30,0x2e,0x31,0x00,0x49,0x53,0x47,0x4e,0x74,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x68,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x07,0x07,0x00,0x00,0x68,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x68,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,0xab,0xab,
    0x4f,0x53,0x47,0x4e,0x68,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x07,0x08,0x00,0x00,0x50,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x07,0x08,0x00,0x00,
    0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x00,0xab,0xab,0xab,
    0x53,0x48,0x45,0x58,0xc8,0x01,0x00,0x00,0x50,0x00,0x01,0x00,0x72,0x00,0x00,0x00,
    0x6a,0x08,0x00,0x01,0x59,0x00,0x00,0x04,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x07,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0x72,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x5f,0x00,0x00,0x03,0x72,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0x72,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0x72,0x20,0x10,0x00,
    0x01,0x00,0x00,0x00,0x67,0x00,0x00,0x04,0xf2,0x20,0x10,0x00,0x02,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x68,0x00,0x00,0x02,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0x72,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x12,0x10,0x00,0x00,0x00,0x00,0x00,
    0x38,0x00,0x00,0x08,0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x56,0x15,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x82,0x20,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,
    0x32,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x10,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x82,0x20,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0xa6,0x1a,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x82,0x20,0x00,
    0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,
    0x10,0x00,0x00,0x07,0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x05,
    0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x38,0x00,0x00,0x07,0x72,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0xf6,0x0f,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x56,0x15,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0xa6,0x1a,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
    0xf2,0x20,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,
    0x53,0x54,0x41,0x54,0x94,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
/*
    cbuffer Pixel : register(b0)
    {
        float _39_numLightsF : packoffset(c0);
        float4 _39_lightData[64] : packoffset(c1);
    };
    
    Texture2DArray<float4> shadowGrid : register(t0);
    SamplerState _shadowGrid_sampler : register(s0);
    
    static float3 v_position;
    static float3 v_normal;
    static float4 o_color;
    
    struct SPIRV_Cross_Input
    {
        float3 v_position : TEXCOORD0;
        float3 v_normal : TEXCOORD1;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 o_color : SV_Target0;
    };
    
    #line 34 ""
    float3 evalLight(float3 P, float3 N, int base)
    {
    #line 34 ""
    #line 35 ""
    #line 36 ""
    #line 37 ""
        float3 _74 = _39_lightData[base].xyz - P;
        float _78 = dot(_74, _74);
        float _88 = _39_lightData[base].w * _39_lightData[base].w;
        float3 result;
        if (_78 < _88)
        {
            float3 _109 = (_74 * _39_lightData[base + 2].xyz) + _39_lightData[base + 3].xyz;
            float _115 = _109.y * 8.0f;
            float _121 = clamp(floor(_115), 0.0f, 7.0f);
    #line 60 ""
            float _141 = _109.x;
    #line 68 ""
            result = ((lerp(shadowGrid.SampleLevel(_shadowGrid_sampler, float3(_141, _109.z, _121), 0.0f).x, shadowGrid.SampleLevel(_shadowGrid_sampler, float3(_141, _109.z, min(_121 + 1.0f, 7.0f)), 0.0f).x, _115 - _121).xxx * dot(N, _74 / sqrt(_78).xxx)) * ((1.0f / (0.100000001490116119384765625f + _78)) - (1.0f / (0.100000001490116119384765625f + _88)))) * _39_lightData[base + 1].xyz;
        }
        else
        {
    #line 71 ""
            result = 0.0f.xxx;
        }
    #line 74 ""
        return result;
    }
    
    #line 79 ""
    float linearToSrgb(inout float x)
    {
    #line 79 ""
        x = clamp(x, 0.0f, 1.0f);
    #line 80 ""
        if (x <= 0.00031308000325225293636322021484375f)
        {
    #line 81 ""
            return 12.9200000762939453125f * x;
        }
        else
        {
    #line 83 ""
            return (1.05499994754791259765625f * pow(x, 0.4166666567325592041015625f)) - 0.054999999701976776123046875f;
        }
    }
    
    #line 88 ""
    float3 linearToSrgb(float3 v)
    {
    #line 88 ""
        float param = v.x;
        float _211 = linearToSrgb(param);
        float param_1 = v.y;
        float _215 = linearToSrgb(param_1);
        float param_2 = v.z;
        float _220 = linearToSrgb(param_2);
        return float3(_211, _215, _220);
    }
    
    #line 93 ""
    float4 tonemap(float3 v)
    {
    #line 93 ""
        float3 param = v / (1.0f.xxx + v);
        float3 _232 = linearToSrgb(param);
        return float4(_232, dot(_232, float3(0.2989999949932098388671875f, 0.58700001239776611328125f, 0.114000000059604644775390625f)));
    }
    
    #line 100 ""
    void frag_main()
    {
    #line 100 ""
    #line 101 ""
    #line 102 ""
        float3 result = 0.0f.xxx;
    #line 103 ""
    #line 104 ""
        for (int base = 0; base < (int(_39_numLightsF) * 4); base += 4)
        {
            float3 param = v_position;
            float3 param_1 = normalize(v_normal);
            int param_2 = base;
            result += evalLight(param, param_1, param_2);
        }
    #line 107 ""
        float3 param_3 = result;
        o_color = tonemap(param_3);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        v_position = stage_input.v_position;
        v_normal = stage_input.v_normal;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.o_color = o_color;
        return stage_output;
    }
*/
static const uint8_t TestMesh_fs_bytecode_hlsl5[2632] = {
    0x44,0x58,0x42,0x43,0xbb,0x3e,0x17,0x75,0x3a,0x57,0x20,0x75,0xc8,0x58,0xac,0x3d,
    0x0a,0x0d,0xf2,0x89,0x01,0x00,0x00,0x00,0x48,0x0a,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x08,0x02,0x00,0x00,0x54,0x02,0x00,0x00,0x88,0x02,0x00,0x00,
    0xac,0x09,0x00,0x00,0x52,0x44,0x45,0x46,0xcc,0x01,0x00,0x00,0x01,0x00,0x00,0x00,
    0xc4,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xff,0xff,
    0x10,0x81,0x00,0x00,0xa4,0x01,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xb0,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0xbb,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5f,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,
    0x72,0x69,0x64,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x00,0x73,0x68,0x61,0x64,
    0x6f,0x77,0x47,0x72,0x69,0x64,0x00,0x50,0x69,0x78,0x65,0x6c,0x00,0xab,0xab,0xab,
    0xbb,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xdc,0x00,0x00,0x00,0x10,0x04,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2c,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x44,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x68,0x01,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x02,0x00,0x00,0x00,
    0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x5f,0x33,0x39,0x5f,0x6e,0x75,0x6d,0x4c,
    0x69,0x67,0x68,0x74,0x73,0x46,0x00,0x66,0x6c,0x6f,0x61,0x74,0x00,0xab,0xab,0xab,
    0x00,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x3b,0x01,0x00,0x00,0x5f,0x33,0x39,0x5f,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,
    0x61,0x00,0x66,0x6c,0x6f,0x61,0x74,0x34,0x00,0xab,0xab,0xab,0x01,0x00,0x03,0x00,
    0x01,0x00,0x04,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x01,0x00,0x00,
    0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,
    0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,
    0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,0x49,0x53,0x47,0x4e,0x44,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,
    0x38,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,
    0x61,0x72,0x67,0x65,0x74,0x00,0xab,0xab,0x53,0x48,0x45,0x58,0x1c,0x07,0x00,0x00,
    0x50,0x00,0x00,0x00,0xc7,0x01,0x00,0x00,0x6a,0x08,0x00,0x01,0x59,0x08,0x00,0x04,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x40,0x00,0x04,0x00,0x70,0x10,0x00,
    0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x62,0x10,0x00,0x03,0x72,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x62,0x10,0x00,0x03,0x72,0x10,0x10,0x00,0x01,0x00,0x00,0x00,
    0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x68,0x00,0x00,0x02,
    0x06,0x00,0x00,0x00,0x1b,0x00,0x00,0x06,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x0a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x00,0x00,0x07,
    0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x10,0x00,0x00,0x07,0x22,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x12,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x12,0x10,0x00,
    0x01,0x00,0x00,0x00,0x44,0x00,0x00,0x05,0x22,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x07,0xe2,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x56,0x05,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x19,0x10,0x00,
    0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x08,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x01,0x21,0x00,0x00,0x07,0x12,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x04,0x03,0x0a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x00,0x00,0x00,0x0b,0x72,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x12,0x10,0x80,
    0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x82,0x20,0x06,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x10,0x00,0x00,0x07,
    0x82,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,0x38,0x00,0x00,0x0d,0x12,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x3a,0x80,0x20,0x06,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x3a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x3a,0x80,0x20,0x06,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x31,0x00,0x00,0x07,
    0x12,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x1f,0x00,0x04,0x03,0x0a,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x1e,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,0x03,0x00,0x00,0x00,
    0xf6,0x0f,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x02,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0f,
    0x72,0x00,0x10,0x00,0x04,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,
    0x46,0x82,0x20,0x06,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x46,0x82,0x20,0x06,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x38,0x00,0x00,0x07,0x12,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x04,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x00,0x41,0x41,0x00,0x00,0x05,0x12,0x00,0x10,0x00,0x03,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x34,0x00,0x00,0x07,0x12,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x33,0x00,0x00,0x07,0x82,0x00,0x10,0x00,0x04,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0xe0,0x40,
    0x48,0x00,0x00,0x8d,0x02,0x02,0x00,0x80,0x43,0x55,0x15,0x00,0x12,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x86,0x03,0x10,0x00,0x04,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x22,0x00,0x10,0x00,0x03,0x00,0x00,0x00,
    0x3a,0x00,0x10,0x00,0x04,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x33,0x00,0x00,0x07,0x42,0x00,0x10,0x00,0x05,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0xe0,0x40,0x36,0x00,0x00,0x05,
    0x32,0x00,0x10,0x00,0x05,0x00,0x00,0x00,0x86,0x00,0x10,0x00,0x04,0x00,0x00,0x00,
    0x48,0x00,0x00,0x8d,0x02,0x02,0x00,0x80,0x43,0x55,0x15,0x00,0x22,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x05,0x00,0x00,0x00,0x16,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0x82,0x00,0x10,0x00,0x03,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x04,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x41,
    0x3a,0x00,0x10,0x80,0x41,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
    0x22,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x0a,0x00,0x10,0x80,0x41,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x32,0x00,0x00,0x09,
    0x12,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,
    0x4b,0x00,0x00,0x05,0x22,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x0e,0x00,0x00,0x07,0x72,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,0x56,0x05,0x10,0x00,0x03,0x00,0x00,0x00,
    0x10,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x96,0x07,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,0x38,0x00,0x00,0x07,
    0x12,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x22,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0xcd,0xcc,0xcc,0x3d,0x0e,0x00,0x00,0x0a,0x22,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,
    0x00,0x00,0x80,0x3f,0x1a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x32,0x00,0x00,0x0f,
    0x42,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x3a,0x80,0x20,0x06,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x3a,0x80,0x20,0x06,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0xcd,0xcc,0xcc,0x3d,0x0e,0x00,0x00,0x0a,0x42,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,
    0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,0x2a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x00,0x00,0x00,0x08,0x22,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x2a,0x00,0x10,0x80,
    0x41,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x38,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,
    0x72,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x06,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x46,0x82,0x20,0x06,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,
    0x03,0x00,0x00,0x00,0x12,0x00,0x00,0x01,0x36,0x00,0x00,0x08,0x72,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x01,0x00,0x00,0x00,0x07,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,0x1e,0x00,0x00,0x07,0x82,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x04,0x00,0x00,0x00,0x16,0x00,0x00,0x01,0x00,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,
    0x0e,0x20,0x00,0x07,0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x1d,0x00,0x00,0x0a,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xe3,0x24,0xa4,0x39,
    0xe3,0x24,0xa4,0x39,0xe3,0x24,0xa4,0x39,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x52,0xb8,0x4e,0x41,
    0x52,0xb8,0x4e,0x41,0x52,0xb8,0x4e,0x41,0x00,0x00,0x00,0x00,0x2f,0x00,0x00,0x05,
    0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,
    0x38,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x55,0x55,0xd5,0x3e,0x55,0x55,0xd5,0x3e,
    0x55,0x55,0xd5,0x3e,0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x05,0x72,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0f,
    0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x3d,0x0a,0x87,0x3f,0x3d,0x0a,0x87,0x3f,0x3d,0x0a,0x87,0x3f,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xae,0x47,0x61,0xbd,0xae,0x47,0x61,0xbd,
    0xae,0x47,0x61,0xbd,0x00,0x00,0x00,0x00,0x37,0x00,0x00,0x09,0x72,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x02,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x0a,
    0x82,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x87,0x16,0x99,0x3e,0xa2,0x45,0x16,0x3f,0xd5,0x78,0xe9,0x3d,
    0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x72,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,
    0x94,0x00,0x00,0x00,0x39,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x26,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
static const sg_shader_desc TestMesh_TestMesh_shader_desc_hlsl5 = {
  0, /* _start_canary */
  { /*attrs*/{"position","TEXCOORD",0},{"normal","TEXCOORD",1},{"tangent","TEXCOORD",2},{"uv","TEXCOORD",3},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    0, /* source */
    TestMesh_vs_bytecode_hlsl5, /* bytecode */
    1244, /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        128, /* size */
        { /* uniforms */{"Transform",SG_UNIFORMTYPE_FLOAT4,8},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    0, /* source */
    TestMesh_fs_bytecode_hlsl5, /* bytecode */
    2632, /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        1040, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,65},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"shadowGrid",SG_IMAGETYPE_ARRAY},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "TestMesh_TestMesh_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_D3D11 */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct Transform
    {
        float4x4 transform;
        float4x4 normalTransform;
    };
    
    struct main0_out
    {
        float3 v_position [[user(locn0)]];
        float3 v_normal [[user(locn1)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 position [[attribute(0)]];
        float3 normal [[attribute(1)]];
    };
    
    #line 22 ""
    vertex main0_out main0(main0_in in [[stage_in]], constant Transform& _26 [[buffer(0)]])
    {
        main0_out out = {};
    #line 22 ""
        out.v_position = in.position;
    #line 23 ""
        out.gl_Position = _26.transform * float4(in.position, 1.0);
    #line 24 ""
        out.v_normal = normalize((_26.normalTransform * float4(in.normal, 0.0)).xyz);
        return out;
    }
    
*/
static const char TestMesh_vs_source_metal_macos[743] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x54,
    0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,
    0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,
    0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,
    0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,
    0x6e,0x74,0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x26,0x20,0x5f,0x32,
    0x36,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,
    0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,
    0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x36,0x2e,0x74,
    0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x34,0x20,0x22,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x5f,
    0x32,0x36,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,
    0x72,0x6d,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,
    0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct Pixel
    {
        float numLightsF;
        float4 lightData[64];
    };
    
    struct main0_out
    {
        float4 o_color [[color(0)]];
    };
    
    struct main0_in
    {
        float3 v_position [[user(locn0)]];
        float3 v_normal [[user(locn1)]];
    };
    
    #line 34 ""
    static inline __attribute__((always_inline))
    float3 evalLight(thread const float3& P, thread const float3& N, thread const int& base, constant Pixel& v_39, thread texture2d_array<float> shadowGrid, thread const sampler shadowGridSmplr)
    {
    #line 34 ""
    #line 35 ""
    #line 36 ""
    #line 37 ""
        float3 _74 = v_39.lightData[base].xyz - P;
        float _78 = dot(_74, _74);
        float _88 = v_39.lightData[base].w * v_39.lightData[base].w;
        float3 result;
        if (_78 < _88)
        {
            float3 _109 = (_74 * v_39.lightData[base + 2].xyz) + v_39.lightData[base + 3].xyz;
            float _115 = _109.y * 8.0;
            float _121 = fast::clamp(floor(_115), 0.0, 7.0);
    #line 60 ""
            float _141 = _109.x;
            float3 _143 = float3(_141, _109.z, _121);
            float3 _154 = float3(_141, _109.z, fast::min(_121 + 1.0, 7.0));
    #line 68 ""
            result = ((float3(mix(shadowGrid.sample(shadowGridSmplr, _143.xy, uint(round(_143.z)), level(0.0)).x, shadowGrid.sample(shadowGridSmplr, _154.xy, uint(round(_154.z)), level(0.0)).x, _115 - _121)) * dot(N, _74 / float3(sqrt(_78)))) * ((1.0 / (0.100000001490116119384765625 + _78)) - (1.0 / (0.100000001490116119384765625 + _88)))) * v_39.lightData[base + 1].xyz;
        }
        else
        {
    #line 71 ""
            result = float3(0.0);
        }
    #line 74 ""
        return result;
    }
    
    #line 79 ""
    static inline __attribute__((always_inline))
    float linearToSrgb(thread float& x)
    {
    #line 79 ""
        x = fast::clamp(x, 0.0, 1.0);
    #line 80 ""
        if (x <= 0.00031308000325225293636322021484375)
        {
    #line 81 ""
            return 12.9200000762939453125 * x;
        }
        else
        {
    #line 83 ""
            return (1.05499994754791259765625 * pow(x, 0.4166666567325592041015625)) - 0.054999999701976776123046875;
        }
    }
    
    #line 88 ""
    static inline __attribute__((always_inline))
    float3 linearToSrgb(thread const float3& v)
    {
    #line 88 ""
        float param = v.x;
        float _211 = linearToSrgb(param);
        float param_1 = v.y;
        float _215 = linearToSrgb(param_1);
        float param_2 = v.z;
        float _220 = linearToSrgb(param_2);
        return float3(_211, _215, _220);
    }
    
    #line 93 ""
    static inline __attribute__((always_inline))
    float4 tonemap(thread const float3& v)
    {
    #line 93 ""
        float3 param = v / (float3(1.0) + v);
        float3 _232 = linearToSrgb(param);
        return float4(_232, dot(_232, float3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625)));
    }
    
    #line 100 ""
    fragment main0_out main0(main0_in in [[stage_in]], constant Pixel& v_39 [[buffer(0)]], texture2d_array<float> shadowGrid [[texture(0)]], sampler shadowGridSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 100 ""
    #line 101 ""
    #line 102 ""
        float3 result = float3(0.0);
    #line 103 ""
    #line 104 ""
        for (int base = 0; base < (int(v_39.numLightsF) * 4); base += 4)
        {
            float3 param = in.v_position;
            float3 param_1 = normalize(in.v_normal);
            int param_2 = base;
            result += evalLight(param, param_1, param_2, v_39, shadowGrid, shadowGridSmplr);
        }
    #line 107 ""
        float3 param_3 = result;
        out.o_color = tonemap(param_3);
        return out;
    }
    
*/
static const char TestMesh_fs_source_metal_macos[3456] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x50,0x69,0x78,0x65,0x6c,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6e,0x75,0x6d,0x4c,0x69,0x67,
    0x68,0x74,0x73,0x46,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x36,0x34,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,
    0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x33,0x34,0x20,0x22,0x22,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,
    0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,
    0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x65,0x76,
    0x61,0x6c,0x4c,0x69,0x67,0x68,0x74,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x50,0x2c,0x20,
    0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x26,0x20,0x4e,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x69,0x6e,0x74,0x26,0x20,0x62,0x61,0x73,0x65,0x2c,0x20,
    0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x50,0x69,0x78,0x65,0x6c,0x26,0x20,
    0x76,0x5f,0x33,0x39,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x2c,0x20,
    0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x53,
    0x6d,0x70,0x6c,0x72,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x34,
    0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x35,0x20,0x22,0x22,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x36,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x33,0x37,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,0x76,0x5f,0x33,0x39,0x2e,0x6c,0x69,
    0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,0x61,0x73,0x65,0x5d,0x2e,0x78,0x79,
    0x7a,0x20,0x2d,0x20,0x50,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x37,0x38,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,0x37,0x34,0x2c,0x20,
    0x5f,0x37,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x38,0x38,0x20,0x3d,0x20,0x76,0x5f,0x33,0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,
    0x44,0x61,0x74,0x61,0x5b,0x62,0x61,0x73,0x65,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x76,
    0x5f,0x33,0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,0x61,
    0x73,0x65,0x5d,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x37,0x38,0x20,0x3c,0x20,0x5f,0x38,0x38,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x5f,0x31,0x30,0x39,0x20,0x3d,0x20,0x28,0x5f,0x37,0x34,0x20,0x2a,0x20,
    0x76,0x5f,0x33,0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,
    0x61,0x73,0x65,0x20,0x2b,0x20,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,
    0x76,0x5f,0x33,0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,
    0x61,0x73,0x65,0x20,0x2b,0x20,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x35,
    0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x2e,0x79,0x20,0x2a,0x20,0x38,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x32,0x31,0x20,0x3d,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,
    0x70,0x28,0x66,0x6c,0x6f,0x6f,0x72,0x28,0x5f,0x31,0x31,0x35,0x29,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x37,0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x36,0x30,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x2e,
    0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x5f,0x31,0x34,0x33,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x31,0x34,0x31,0x2c,0x20,0x5f,0x31,0x30,0x39,0x2e,0x7a,0x2c,0x20,0x5f,0x31,
    0x32,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x5f,0x31,0x35,0x34,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x5f,0x31,0x34,0x31,0x2c,0x20,0x5f,0x31,0x30,0x39,0x2e,0x7a,0x2c,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x32,0x31,0x20,0x2b,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x37,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x36,0x38,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x6d,0x69,0x78,0x28,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,
    0x64,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,
    0x72,0x69,0x64,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x5f,0x31,0x34,0x33,0x2e,0x78,
    0x79,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x72,0x6f,0x75,0x6e,0x64,0x28,0x5f,0x31,
    0x34,0x33,0x2e,0x7a,0x29,0x29,0x2c,0x20,0x6c,0x65,0x76,0x65,0x6c,0x28,0x30,0x2e,
    0x30,0x29,0x29,0x2e,0x78,0x2c,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,
    0x64,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,
    0x72,0x69,0x64,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x5f,0x31,0x35,0x34,0x2e,0x78,
    0x79,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x72,0x6f,0x75,0x6e,0x64,0x28,0x5f,0x31,
    0x35,0x34,0x2e,0x7a,0x29,0x29,0x2c,0x20,0x6c,0x65,0x76,0x65,0x6c,0x28,0x30,0x2e,
    0x30,0x29,0x29,0x2e,0x78,0x2c,0x20,0x5f,0x31,0x31,0x35,0x20,0x2d,0x20,0x5f,0x31,
    0x32,0x31,0x29,0x29,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x4e,0x2c,0x20,0x5f,0x37,
    0x34,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x73,0x71,0x72,0x74,0x28,
    0x5f,0x37,0x38,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x28,0x28,0x31,0x2e,0x30,0x20,
    0x2f,0x20,0x28,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,
    0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,
    0x20,0x2b,0x20,0x5f,0x37,0x38,0x29,0x29,0x20,0x2d,0x20,0x28,0x31,0x2e,0x30,0x20,
    0x2f,0x20,0x28,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,
    0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,
    0x20,0x2b,0x20,0x5f,0x38,0x38,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x76,0x5f,0x33,
    0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,0x61,0x73,0x65,
    0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x31,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x34,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x39,0x20,0x22,0x22,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x78,0x29,0x0a,0x7b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x39,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x78,0x20,0x3d,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,
    0x28,0x78,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x38,0x30,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x78,0x20,0x3c,0x3d,0x20,0x30,0x2e,0x30,0x30,0x30,0x33,0x31,0x33,
    0x30,0x38,0x30,0x30,0x30,0x33,0x32,0x35,0x32,0x32,0x35,0x32,0x39,0x33,0x36,0x33,
    0x36,0x33,0x32,0x32,0x30,0x32,0x31,0x34,0x38,0x34,0x33,0x37,0x35,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x38,0x31,0x20,0x22,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x31,0x32,0x2e,0x39,0x32,0x30,0x30,0x30,0x30,0x30,0x37,0x36,0x32,0x39,0x33,0x39,
    0x34,0x35,0x33,0x31,0x32,0x35,0x20,0x2a,0x20,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x38,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x31,0x2e,0x30,
    0x35,0x34,0x39,0x39,0x39,0x39,0x34,0x37,0x35,0x34,0x37,0x39,0x31,0x32,0x35,0x39,
    0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x78,0x2c,0x20,
    0x30,0x2e,0x34,0x31,0x36,0x36,0x36,0x36,0x36,0x35,0x36,0x37,0x33,0x32,0x35,0x35,
    0x39,0x32,0x30,0x34,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x29,0x29,0x20,0x2d,0x20,
    0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,0x39,0x37,
    0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x38,0x38,
    0x20,0x22,0x22,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,
    0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,
    0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,
    0x53,0x72,0x67,0x62,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x76,0x29,0x0a,0x7b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x38,0x38,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x76,0x2e,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x31,
    0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x76,0x2e,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x35,0x20,
    0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x76,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x30,
    0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x32,0x31,0x31,
    0x2c,0x20,0x5f,0x32,0x31,0x35,0x2c,0x20,0x5f,0x32,0x32,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x33,0x20,0x22,0x22,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x74,0x6f,0x6e,0x65,0x6d,0x61,0x70,0x28,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x76,
    0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x33,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x20,0x3d,0x20,0x76,0x20,0x2f,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x31,
    0x2e,0x30,0x29,0x20,0x2b,0x20,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x5f,0x32,0x33,0x32,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,
    0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x5f,0x32,0x33,0x32,0x2c,0x20,0x64,0x6f,0x74,0x28,0x5f,0x32,0x33,
    0x32,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,
    0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,
    0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,
    0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,
    0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,
    0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,
    0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x30,
    0x20,0x22,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x50,0x69,0x78,0x65,0x6c,0x26,0x20,0x76,0x5f,0x33,0x39,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,
    0x3e,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x20,0x5b,0x5b,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x53,
    0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x30,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x30,0x31,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,
    0x30,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x33,
    0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x34,0x20,0x22,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x62,0x61,
    0x73,0x65,0x20,0x3d,0x20,0x30,0x3b,0x20,0x62,0x61,0x73,0x65,0x20,0x3c,0x20,0x28,
    0x69,0x6e,0x74,0x28,0x76,0x5f,0x33,0x39,0x2e,0x6e,0x75,0x6d,0x4c,0x69,0x67,0x68,
    0x74,0x73,0x46,0x29,0x20,0x2a,0x20,0x34,0x29,0x3b,0x20,0x62,0x61,0x73,0x65,0x20,
    0x2b,0x3d,0x20,0x34,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x69,0x7a,0x65,0x28,0x69,0x6e,0x2e,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x62,0x61,0x73,0x65,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x2b,0x3d,
    0x20,0x65,0x76,0x61,0x6c,0x4c,0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x2c,0x20,0x76,0x5f,0x33,0x39,0x2c,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,
    0x47,0x72,0x69,0x64,0x2c,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,
    0x53,0x6d,0x70,0x6c,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x30,0x37,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,
    0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x6f,0x6e,0x65,0x6d,0x61,
    0x70,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
static const sg_shader_desc TestMesh_TestMesh_shader_desc_metal_macos = {
  0, /* _start_canary */
  { /*attrs*/{"position","TEXCOORD",0},{"normal","TEXCOORD",1},{"tangent","TEXCOORD",2},{"uv","TEXCOORD",3},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    TestMesh_vs_source_metal_macos, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main0", /* entry */
    { /* uniform blocks */
      {
        128, /* size */
        { /* uniforms */{"Transform",SG_UNIFORMTYPE_FLOAT4,8},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    TestMesh_fs_source_metal_macos, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main0", /* entry */
    { /* uniform blocks */
      {
        1040, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,65},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"shadowGrid",SG_IMAGETYPE_ARRAY},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "TestMesh_TestMesh_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_METAL */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct Transform
    {
        float4x4 transform;
        float4x4 normalTransform;
    };
    
    struct main0_out
    {
        float3 v_position [[user(locn0)]];
        float3 v_normal [[user(locn1)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 position [[attribute(0)]];
        float3 normal [[attribute(1)]];
    };
    
    #line 22 ""
    vertex main0_out main0(main0_in in [[stage_in]], constant Transform& _26 [[buffer(0)]])
    {
        main0_out out = {};
    #line 22 ""
        out.v_position = in.position;
    #line 23 ""
        out.gl_Position = _26.transform * float4(in.position, 1.0);
    #line 24 ""
        out.v_normal = normalize((_26.normalTransform * float4(in.normal, 0.0)).xyz);
        return out;
    }
    
*/
static const char TestMesh_vs_source_metal_ios[743] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x54,
    0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,
    0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,
    0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,
    0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,
    0x6e,0x74,0x20,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x26,0x20,0x5f,0x32,
    0x36,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,
    0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,
    0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x36,0x2e,0x74,
    0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x34,0x20,0x22,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x5f,
    0x32,0x36,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x54,0x72,0x61,0x6e,0x73,0x66,0x6f,
    0x72,0x6d,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,
    0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct Pixel
    {
        float numLightsF;
        float4 lightData[64];
    };
    
    struct main0_out
    {
        float4 o_color [[color(0)]];
    };
    
    struct main0_in
    {
        float3 v_position [[user(locn0)]];
        float3 v_normal [[user(locn1)]];
    };
    
    #line 34 ""
    static inline __attribute__((always_inline))
    float3 evalLight(thread const float3& P, thread const float3& N, thread const int& base, constant Pixel& v_39, thread texture2d_array<float> shadowGrid, thread const sampler shadowGridSmplr)
    {
    #line 34 ""
    #line 35 ""
    #line 36 ""
    #line 37 ""
        float3 _74 = v_39.lightData[base].xyz - P;
        float _78 = dot(_74, _74);
        float _88 = v_39.lightData[base].w * v_39.lightData[base].w;
        float3 result;
        if (_78 < _88)
        {
            float3 _109 = (_74 * v_39.lightData[base + 2].xyz) + v_39.lightData[base + 3].xyz;
            float _115 = _109.y * 8.0;
            float _121 = fast::clamp(floor(_115), 0.0, 7.0);
    #line 60 ""
            float _141 = _109.x;
            float3 _143 = float3(_141, _109.z, _121);
            float3 _154 = float3(_141, _109.z, fast::min(_121 + 1.0, 7.0));
    #line 68 ""
            result = ((float3(mix(shadowGrid.sample(shadowGridSmplr, _143.xy, uint(round(_143.z)), level(0.0)).x, shadowGrid.sample(shadowGridSmplr, _154.xy, uint(round(_154.z)), level(0.0)).x, _115 - _121)) * dot(N, _74 / float3(sqrt(_78)))) * ((1.0 / (0.100000001490116119384765625 + _78)) - (1.0 / (0.100000001490116119384765625 + _88)))) * v_39.lightData[base + 1].xyz;
        }
        else
        {
    #line 71 ""
            result = float3(0.0);
        }
    #line 74 ""
        return result;
    }
    
    #line 79 ""
    static inline __attribute__((always_inline))
    float linearToSrgb(thread float& x)
    {
    #line 79 ""
        x = fast::clamp(x, 0.0, 1.0);
    #line 80 ""
        if (x <= 0.00031308000325225293636322021484375)
        {
    #line 81 ""
            return 12.9200000762939453125 * x;
        }
        else
        {
    #line 83 ""
            return (1.05499994754791259765625 * pow(x, 0.4166666567325592041015625)) - 0.054999999701976776123046875;
        }
    }
    
    #line 88 ""
    static inline __attribute__((always_inline))
    float3 linearToSrgb(thread const float3& v)
    {
    #line 88 ""
        float param = v.x;
        float _211 = linearToSrgb(param);
        float param_1 = v.y;
        float _215 = linearToSrgb(param_1);
        float param_2 = v.z;
        float _220 = linearToSrgb(param_2);
        return float3(_211, _215, _220);
    }
    
    #line 93 ""
    static inline __attribute__((always_inline))
    float4 tonemap(thread const float3& v)
    {
    #line 93 ""
        float3 param = v / (float3(1.0) + v);
        float3 _232 = linearToSrgb(param);
        return float4(_232, dot(_232, float3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625)));
    }
    
    #line 100 ""
    fragment main0_out main0(main0_in in [[stage_in]], constant Pixel& v_39 [[buffer(0)]], texture2d_array<float> shadowGrid [[texture(0)]], sampler shadowGridSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 100 ""
    #line 101 ""
    #line 102 ""
        float3 result = float3(0.0);
    #line 103 ""
    #line 104 ""
        for (int base = 0; base < (int(v_39.numLightsF) * 4); base += 4)
        {
            float3 param = in.v_position;
            float3 param_1 = normalize(in.v_normal);
            int param_2 = base;
            result += evalLight(param, param_1, param_2, v_39, shadowGrid, shadowGridSmplr);
        }
    #line 107 ""
        float3 param_3 = result;
        out.o_color = tonemap(param_3);
        return out;
    }
    
*/
static const char TestMesh_fs_source_metal_ios[3456] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x50,0x69,0x78,0x65,0x6c,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6e,0x75,0x6d,0x4c,0x69,0x67,
    0x68,0x74,0x73,0x46,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x36,0x34,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,
    0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x33,0x34,0x20,0x22,0x22,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,
    0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,
    0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x65,0x76,
    0x61,0x6c,0x4c,0x69,0x67,0x68,0x74,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x50,0x2c,0x20,
    0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x26,0x20,0x4e,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x69,0x6e,0x74,0x26,0x20,0x62,0x61,0x73,0x65,0x2c,0x20,
    0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x50,0x69,0x78,0x65,0x6c,0x26,0x20,
    0x76,0x5f,0x33,0x39,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x2c,0x20,
    0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x53,
    0x6d,0x70,0x6c,0x72,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x34,
    0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x35,0x20,0x22,0x22,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x36,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x33,0x37,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,0x76,0x5f,0x33,0x39,0x2e,0x6c,0x69,
    0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,0x61,0x73,0x65,0x5d,0x2e,0x78,0x79,
    0x7a,0x20,0x2d,0x20,0x50,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x37,0x38,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,0x37,0x34,0x2c,0x20,
    0x5f,0x37,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x38,0x38,0x20,0x3d,0x20,0x76,0x5f,0x33,0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,
    0x44,0x61,0x74,0x61,0x5b,0x62,0x61,0x73,0x65,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x76,
    0x5f,0x33,0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,0x61,
    0x73,0x65,0x5d,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x37,0x38,0x20,0x3c,0x20,0x5f,0x38,0x38,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x5f,0x31,0x30,0x39,0x20,0x3d,0x20,0x28,0x5f,0x37,0x34,0x20,0x2a,0x20,
    0x76,0x5f,0x33,0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,
    0x61,0x73,0x65,0x20,0x2b,0x20,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,
    0x76,0x5f,0x33,0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,
    0x61,0x73,0x65,0x20,0x2b,0x20,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x35,
    0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x2e,0x79,0x20,0x2a,0x20,0x38,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x32,0x31,0x20,0x3d,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,
    0x70,0x28,0x66,0x6c,0x6f,0x6f,0x72,0x28,0x5f,0x31,0x31,0x35,0x29,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x37,0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x36,0x30,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x2e,
    0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x5f,0x31,0x34,0x33,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x31,0x34,0x31,0x2c,0x20,0x5f,0x31,0x30,0x39,0x2e,0x7a,0x2c,0x20,0x5f,0x31,
    0x32,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x5f,0x31,0x35,0x34,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x5f,0x31,0x34,0x31,0x2c,0x20,0x5f,0x31,0x30,0x39,0x2e,0x7a,0x2c,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x32,0x31,0x20,0x2b,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x37,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x36,0x38,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x6d,0x69,0x78,0x28,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,
    0x64,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,
    0x72,0x69,0x64,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x5f,0x31,0x34,0x33,0x2e,0x78,
    0x79,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x72,0x6f,0x75,0x6e,0x64,0x28,0x5f,0x31,
    0x34,0x33,0x2e,0x7a,0x29,0x29,0x2c,0x20,0x6c,0x65,0x76,0x65,0x6c,0x28,0x30,0x2e,
    0x30,0x29,0x29,0x2e,0x78,0x2c,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,
    0x64,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,
    0x72,0x69,0x64,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x5f,0x31,0x35,0x34,0x2e,0x78,
    0x79,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x72,0x6f,0x75,0x6e,0x64,0x28,0x5f,0x31,
    0x35,0x34,0x2e,0x7a,0x29,0x29,0x2c,0x20,0x6c,0x65,0x76,0x65,0x6c,0x28,0x30,0x2e,
    0x30,0x29,0x29,0x2e,0x78,0x2c,0x20,0x5f,0x31,0x31,0x35,0x20,0x2d,0x20,0x5f,0x31,
    0x32,0x31,0x29,0x29,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x4e,0x2c,0x20,0x5f,0x37,
    0x34,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x73,0x71,0x72,0x74,0x28,
    0x5f,0x37,0x38,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x28,0x28,0x31,0x2e,0x30,0x20,
    0x2f,0x20,0x28,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,
    0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,
    0x20,0x2b,0x20,0x5f,0x37,0x38,0x29,0x29,0x20,0x2d,0x20,0x28,0x31,0x2e,0x30,0x20,
    0x2f,0x20,0x28,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,
    0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,
    0x20,0x2b,0x20,0x5f,0x38,0x38,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x76,0x5f,0x33,
    0x39,0x2e,0x6c,0x69,0x67,0x68,0x74,0x44,0x61,0x74,0x61,0x5b,0x62,0x61,0x73,0x65,
    0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x31,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x34,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x39,0x20,0x22,0x22,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x78,0x29,0x0a,0x7b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x39,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x78,0x20,0x3d,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,
    0x28,0x78,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x38,0x30,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x78,0x20,0x3c,0x3d,0x20,0x30,0x2e,0x30,0x30,0x30,0x33,0x31,0x33,
    0x30,0x38,0x30,0x30,0x30,0x33,0x32,0x35,0x32,0x32,0x35,0x32,0x39,0x33,0x36,0x33,
    0x36,0x33,0x32,0x32,0x30,0x32,0x31,0x34,0x38,0x34,0x33,0x37,0x35,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x38,0x31,0x20,0x22,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x31,0x32,0x2e,0x39,0x32,0x30,0x30,0x30,0x30,0x30,0x37,0x36,0x32,0x39,0x33,0x39,
    0x34,0x35,0x33,0x31,0x32,0x35,0x20,0x2a,0x20,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x38,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x31,0x2e,0x30,
    0x35,0x34,0x39,0x39,0x39,0x39,0x34,0x37,0x35,0x34,0x37,0x39,0x31,0x32,0x35,0x39,
    0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x78,0x2c,0x20,
    0x30,0x2e,0x34,0x31,0x36,0x36,0x36,0x36,0x36,0x35,0x36,0x37,0x33,0x32,0x35,0x35,
    0x39,0x32,0x30,0x34,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x29,0x29,0x20,0x2d,0x20,
    0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,0x39,0x37,
    0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x38,0x38,
    0x20,0x22,0x22,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,
    0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,
    0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,
    0x53,0x72,0x67,0x62,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x76,0x29,0x0a,0x7b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x38,0x38,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x76,0x2e,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x31,
    0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x76,0x2e,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x35,0x20,
    0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x76,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x30,
    0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x32,0x31,0x31,
    0x2c,0x20,0x5f,0x32,0x31,0x35,0x2c,0x20,0x5f,0x32,0x32,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x33,0x20,0x22,0x22,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x74,0x6f,0x6e,0x65,0x6d,0x61,0x70,0x28,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x76,
    0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x33,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x20,0x3d,0x20,0x76,0x20,0x2f,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x31,
    0x2e,0x30,0x29,0x20,0x2b,0x20,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x5f,0x32,0x33,0x32,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,
    0x61,0x72,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x5f,0x32,0x33,0x32,0x2c,0x20,0x64,0x6f,0x74,0x28,0x5f,0x32,0x33,
    0x32,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,
    0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,
    0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,
    0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,
    0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,
    0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,
    0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x30,
    0x20,0x22,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x50,0x69,0x78,0x65,0x6c,0x26,0x20,0x76,0x5f,0x33,0x39,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,
    0x3e,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x20,0x5b,0x5b,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,0x53,
    0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x30,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x30,0x31,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,
    0x30,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x33,
    0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x34,0x20,0x22,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x62,0x61,
    0x73,0x65,0x20,0x3d,0x20,0x30,0x3b,0x20,0x62,0x61,0x73,0x65,0x20,0x3c,0x20,0x28,
    0x69,0x6e,0x74,0x28,0x76,0x5f,0x33,0x39,0x2e,0x6e,0x75,0x6d,0x4c,0x69,0x67,0x68,
    0x74,0x73,0x46,0x29,0x20,0x2a,0x20,0x34,0x29,0x3b,0x20,0x62,0x61,0x73,0x65,0x20,
    0x2b,0x3d,0x20,0x34,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x69,0x7a,0x65,0x28,0x69,0x6e,0x2e,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x62,0x61,0x73,0x65,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x2b,0x3d,
    0x20,0x65,0x76,0x61,0x6c,0x4c,0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x2c,0x20,0x76,0x5f,0x33,0x39,0x2c,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,
    0x47,0x72,0x69,0x64,0x2c,0x20,0x73,0x68,0x61,0x64,0x6f,0x77,0x47,0x72,0x69,0x64,
    0x53,0x6d,0x70,0x6c,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x30,0x37,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,
    0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x6f,0x6e,0x65,0x6d,0x61,
    0x70,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
static const sg_shader_desc TestMesh_TestMesh_shader_desc_metal_ios = {
  0, /* _start_canary */
  { /*attrs*/{"position","TEXCOORD",0},{"normal","TEXCOORD",1},{"tangent","TEXCOORD",2},{"uv","TEXCOORD",3},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    TestMesh_vs_source_metal_ios, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main0", /* entry */
    { /* uniform blocks */
      {
        128, /* size */
        { /* uniforms */{"Transform",SG_UNIFORMTYPE_FLOAT4,8},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    TestMesh_fs_source_metal_ios, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main0", /* entry */
    { /* uniform blocks */
      {
        1040, /* size */
        { /* uniforms */{"Pixel",SG_UNIFORMTYPE_FLOAT4,65},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {"shadowGrid",SG_IMAGETYPE_ARRAY},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "TestMesh_TestMesh_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_METAL */
const sg_shader_desc* TestMesh_TestMesh_shader_desc(void) {
    #if defined(SOKOL_GLCORE33)
    if (sg_query_backend() == SG_BACKEND_GLCORE33) {
        return &TestMesh_TestMesh_shader_desc_glsl330;
    }
    #endif /* SOKOL_GLCORE33 */
    #if defined(SOKOL_GLES3)
    if (sg_query_backend() == SG_BACKEND_GLES3) {
        return &TestMesh_TestMesh_shader_desc_glsl300es;
    }
    #endif /* SOKOL_GLES3 */
    #if defined(SOKOL_D3D11)
    if (sg_query_backend() == SG_BACKEND_D3D11) {
        return &TestMesh_TestMesh_shader_desc_hlsl5;
    }
    #endif /* SOKOL_D3D11 */
    #if defined(SOKOL_METAL)
    if (sg_query_backend() == SG_BACKEND_METAL_MACOS) {
        return &TestMesh_TestMesh_shader_desc_metal_macos;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (sg_query_backend() == SG_BACKEND_METAL_IOS) {
        return &TestMesh_TestMesh_shader_desc_metal_ios;
    }
    #endif /* SOKOL_METAL */
    return 0; /* can't happen */
}
#endif /* SOKOL_SHDC_IMPL */
