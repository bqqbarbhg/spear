#include "FixedPoint.h"

namespace sv {

// Generated by misc/gen-fixed-sin.py
uint16_t fixedSinTab[] = {
	0x0000,0x0478,0x08ef,0x0d66,0x11db,0x1650,0x1ac2,0x1f33,0x23a1,
	0x280c,0x2c74,0x30d9,0x3539,0x3996,0x3dee,0x4242,0x4690,0x4ad9,
	0x4f1b,0x5358,0x578e,0x5bbe,0x5fe6,0x6407,0x681f,0x6c30,0x7039,
	0x7438,0x782f,0x7c1c,0x7fff,0x83d9,0x87a8,0x8b6d,0x8f27,0x92d5,
	0x9679,0x9a10,0x9d9b,0xa11b,0xa48d,0xa7f3,0xab4b,0xae97,0xb1d4,
	0xb504,0xb826,0xbb39,0xbe3e,0xc134,0xc41b,0xc6f2,0xc9ba,0xcc73,
	0xcf1b,0xd1b3,0xd43b,0xd6b2,0xd919,0xdb6e,0xddb3,0xdfe6,0xe208,
	0xe418,0xe616,0xe803,0xe9dd,0xeba5,0xed5b,0xeefe,0xf08f,0xf20d,
	0xf377,0xf4cf,0xf614,0xf746,0xf864,0xf96f,0xfa67,0xfb4b,0xfc1b,
	0xfcd8,0xfd81,0xfe17,0xfe98,0xff06,0xff5f,0xffa5,0xffd7,0xfff5,
};

int32_t fixedSin360(int32_t angle)
{
	sf_assert(angle >= 0 && angle < 360);
	if (angle < 90) {
		return (int32_t)(uint32_t)fixedSinTab[angle];
	} else if (angle == 90) {
		return 0x10000;
	} else if (angle <= 180) {
		return (int32_t)(uint32_t)fixedSinTab[180 - angle];
	} else if (angle < 270) {
		return -(int32_t)(uint32_t)fixedSinTab[angle - 180];
	} else if (angle == 270) {
		return -0x10000;
	} else {
		return -(int32_t)(uint32_t)fixedSinTab[360 - angle];
	}
}

int32_t fixedCos360(int32_t angle)
{
	sf_assert(angle >= 0 && angle < 360);
	if (angle == 0) {
		return 0x10000;
	} else if (angle <= 90) {
		return (int32_t)fixedSinTab[90 - angle];
	} else if (angle < 180) {
		return -(int32_t)fixedSinTab[angle - 90];
	} else if (angle == 180) {
		return -0x10000;
	} else if (angle <= 270) {
		return -(int32_t)fixedSinTab[270 - angle];
	} else {
		return (int32_t)fixedSinTab[angle - 270];
	}
}

int32_t fixedSin(int32_t angle)
{
	if (angle < 0) {
		return -fixedSin360(-angle % 360);
	} else {
		return fixedSin360(angle % 360);
	}
}

int32_t fixedCos(int32_t angle)
{
	if (angle < 0) {
		return fixedCos360(-angle % 360);
	} else {
		return fixedCos360(angle % 360);
	}
}

}
